{"version":3,"sources":["features/FieldService/FRU/index.tsx","app/BaseDataGrid.tsx","app/Paper.tsx","logic/date.ts","logic/utils.ts","components/Datagrid/hooks.tsx","components/Datagrid/FullDataGrid.tsx"],"names":["FRU","useState","activeTab","setActiveTab","selectedFru","setSelectedFru","FRUs","useSwr","data","fruDevicesColumns","useMemo","field","headerName","width","type","disableColumnMenu","valueFormatter","params","row","prefVendor","name","cost","qtyOnHand","callCols","r","ItemId","no","flex","description","formatTimestampToDate","lead","LineItemRecordId","price","value","textColor","onChange","e","nv","style","marginBottom","label","disabled","url","columns","defaultQueries","device","onRowSelected","height","rows","result","cols","d","useDataGridStyles","makeStyles","root","backgroundColor","border","color","display","opacity","boxShadow","fill","BaseDataGrid","classes","flexGrow","density","components","Toolbar","GridToolbar","className","ScrollDataGrid","BasePaper","withStyles","theme","borderRadius","padding","props","IconPaper","spacing","flexDirection","justifyContent","alignItems","elevation","timestamp","format","formatDate","date","dateFormat","Date","getModifiedValues","values","initialValues","modifiedValues","Object","entries","forEach","entry","key","keys","length","countProperty","propGetter","filter","item","generateQuery","queryArray","paramValue","paramName","undefined","push","join","useDataGridData","limit","page","setPage","loading","setLoading","dataGridClasses","paginationQueries","otherQueries","useSWR","a","get","console","error","mutate","val","useRef","current","useStickyResult","FullDataGrid","filters","setFilters","sorts","setSort","setLimit","items","pagination","pageSize","rowCount","total","filterMode","paginationMode","sortingMode","onSortModelChange","s","sortModel","sort","order","onPageChange","p","onPageSizeChange","ps","onFilterModelChange","f","filterModel","columnField","operatorValue"],"mappings":"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","file":"static/js/29.48f12176.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { GridColDef } from \"@material-ui/data-grid\";\r\nimport { Box, Tabs, Tab } from \"@material-ui/core\";\r\nimport useSwr from \"swr\";\r\n\r\nimport BaseDataGrid from \"../../../app/BaseDataGrid\";\r\nimport { BasePaper } from \"../../../app/Paper\";\r\n\r\n// import Details from \"./Details\";\r\n\r\nimport { formatTimestampToDate } from \"../../../logic/date\";\r\nimport FullDataGrid from \"../../../components/Datagrid/FullDataGrid\";\r\n\r\nexport default function FRU() {\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [selectedFru, setSelectedFru] = useState<any>();\r\n\r\n    const { data: FRUs } = useSwr(\"/unit?fru=true\");\r\n    // /item?device=true&page=1&containProduct%20Family=FRU\r\n\r\n    const fruDevicesColumns = useMemo(\r\n        () => [\r\n            { field: \"no\", headerName: \"Number\", width: 100 },\r\n            { field: \"name\", headerName: \"Name\", width: 180 },\r\n            { field: \"description\", headerName: \"Description\", width: 200 },\r\n            //filter ha dynamic hast\r\n            {\r\n                field: \"salesApproved\",\r\n                headerName: \"Sales Ap.\",\r\n                type: \"boolean\",\r\n                width: 80,\r\n                disableColumnMenu: true,\r\n            },\r\n            {\r\n                field: \"engineeringApproved\",\r\n                headerName: \"Eng. Ap.\",\r\n                type: \"boolean\",\r\n                width: 80,\r\n                disableColumnMenu: true,\r\n            },\r\n            {\r\n                field: \"shippingApproved\",\r\n                headerName: \"Ship Ap.\",\r\n                type: \"boolean\",\r\n                width: 80,\r\n                disableColumnMenu: true,\r\n            },\r\n            {\r\n                field: \"prefVendor\",\r\n                headerName: \"Preferred Vendor\",\r\n                valueFormatter: (params: any) => params.row?.prefVendor?.name,\r\n                disableColumnMenu: true,\r\n                width: 150,\r\n            },\r\n            { field: \"vendorPartNumber\", headerName: \"V. Part NO.\", width: 100 },\r\n            { field: \"cost\", headerName: \"Cost\", width: 80 },\r\n            { field: \"location\", headerName: \"Location\", width: 100 },\r\n            { field: \"qtyOnHand\", headerName: \"QOH.\", width: 80 },\r\n            { field: \"qtyRemain\", headerName: \" Remain\", width: 80 },\r\n            { field: \"qtyOnOrder\", headerName: \"on Order\", width: 80 },\r\n            { field: \"qtyAllocated\", headerName: \"Allocated\", width: 80 },\r\n            { field: \"usedInLastQuarter\", headerName: \"Used 90\", width: 80 },\r\n            { field: \"fifo\", headerName: \"FIFO Val.\", width: 80 },\r\n            {\r\n                field: \"qohVal\",\r\n                headerName: \"QOH Val.\",\r\n                width: 80,\r\n                valueFormatter: (params: any) => params.row?.cost * params.row?.qtyOnHand,\r\n                // disableColumnMenu: true,\r\n            },\r\n            { field: \"uom\", headerName: \"UOM\", width: 100, disableColumnMenu: true },\r\n            {\r\n                field: \"obsolete\",\r\n                headerName: \"Obsolete\",\r\n                type: \"boolean\",\r\n                width: 80,\r\n                // disableColumnMenu: true,\r\n            },\r\n            {\r\n                field: \"nonInventoryItem\",\r\n                headerName: \"NON Inv.\",\r\n                type: \"boolean\",\r\n                width: 80,\r\n                // disableColumnMenu: true,\r\n            },\r\n            {\r\n                field: \"rndOnly\",\r\n                headerName: \"R&D\",\r\n                type: \"boolean\",\r\n                width: 80,\r\n                // disableColumnMenu: true,\r\n            },\r\n        ],\r\n        []\r\n    );\r\n\r\n    const callCols: GridColDef[] = [\r\n        {\r\n            field: \"number\",\r\n            headerName: \"FRU Number\",\r\n            width: 150,\r\n            valueFormatter: (r) => r.row?.ItemId?.no,\r\n        },\r\n        { field: \"name\", headerName: \"FRU Name\", width: 200, valueFormatter: (r) => r.row?.ItemId?.name },\r\n        {\r\n            field: \"description\",\r\n            headerName: \"FRU Description\",\r\n            flex: 1,\r\n            valueFormatter: (r) => r.row?.ItemId?.description,\r\n        },\r\n        {\r\n            field: \"Lead Time\",\r\n            valueFormatter: (r) => formatTimestampToDate(r.row?.ItemId?.lead),\r\n            width: 120,\r\n        },\r\n\r\n        { field: \"price\", headerName: \"Price\", width: 110, valueFormatter: (r) => r.row?.LineItemRecordId?.price },\r\n    ];\r\n\r\n    return (\r\n        <Box>\r\n            <BasePaper>\r\n                <Tabs\r\n                    value={activeTab}\r\n                    textColor=\"primary\"\r\n                    onChange={(e, nv) => setActiveTab(nv)}\r\n                    style={{ marginBottom: 10 }}\r\n                >\r\n                    <Tab label=\"Devices\" />\r\n                    <Tab label=\"Units\" />\r\n                    <Tab label=\"Details\" disabled={!selectedFru} />\r\n                </Tabs>\r\n                {activeTab === 0 && (\r\n                    <FullDataGrid\r\n                        url=\"/item\"\r\n                        columns={fruDevicesColumns}\r\n                        defaultQueries={{ device: true, \"containProduct Family\": \"FRU\" }}\r\n                        onRowSelected={() => {}}\r\n                        height={450}\r\n                    />\r\n                )}\r\n                {activeTab === 1 && FRUs && (\r\n                    <BaseDataGrid\r\n                        height={450}\r\n                        rows={FRUs.result || []}\r\n                        cols={callCols}\r\n                        onRowSelected={(d) => {\r\n                            setSelectedFru(d);\r\n                            setActiveTab(1);\r\n                        }}\r\n                    />\r\n                )}\r\n                {/* {activeTab === 1 && selectedFru && <Details FRUsData={selectedFru} />} */}\r\n            </BasePaper>\r\n        </Box>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { DataGrid, GridToolbar } from \"@material-ui/data-grid\";\r\n\r\nexport const useDataGridStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#f9f9f9\",\r\n        border: \"none\",\r\n\r\n        \"& .MuiDataGrid-columnsContainer\": {\r\n            backgroundColor: \"#202731\",\r\n            color: \"#fff\",\r\n            // borderRadius: \" 10px 10px 0 0\",\r\n        },\r\n        \"& .MuiDataGrid-iconSeparator\": {\r\n            display: \"none\",\r\n            width: 0,\r\n            height: 0,\r\n            opacity: 0,\r\n        },\r\n        \"& .Mui-selected\": {\r\n            boxShadow: \" rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n            backgroundColor: \"#fff !important\",\r\n        },\r\n        \"& .MuiDataGrid-sortIcon\": {\r\n            fill: \"white\",\r\n        },\r\n    },\r\n});\r\n\r\ninterface IBaseDataGrid {\r\n    onRowSelected?: (row: any) => void;\r\n    rows: any[];\r\n    cols: any[];\r\n    height?: number;\r\n}\r\n\r\nexport default function BaseDataGrid({ onRowSelected, rows, cols, height }: IBaseDataGrid) {\r\n    const classes = useDataGridStyles();\r\n\r\n    // const updatedCols = cols.map((x) => {\r\n    //     let obj = Object.keys(x);\r\n    //     let check = false;\r\n    //     for (let o in obj) {\r\n    //         if (o == \"flex\") {\r\n    //             check = true;\r\n    //         }\r\n    //     }\r\n    //     if (!check) {\r\n    //         x = { ...x, flex: 1 };\r\n    //     }\r\n    //     return x;\r\n    // });\r\n\r\n    return (\r\n        // <Box display=\"flex\" boxShadow=\"rgba(0, 0, 0, 0.08) 0px 4px 12px\" border=\"none\" height=\"100%\">\r\n        <div\r\n            style={{\r\n                flexGrow: 1,\r\n                height: height || 450,\r\n            }}\r\n        >\r\n            <DataGrid\r\n                density=\"compact\"\r\n                components={{ Toolbar: GridToolbar }}\r\n                className={classes.root}\r\n                onRowSelected={(r) => {\r\n                    onRowSelected && onRowSelected(r.data);\r\n                }}\r\n                columns={cols}\r\n                rows={rows}\r\n            />\r\n        </div>\r\n        // </Box>\r\n    );\r\n}\r\n\r\nexport const ScrollDataGrid = ({ onRowSelected, rows, cols, height }: IBaseDataGrid) => {\r\n    const classes = useDataGridStyles();\r\n\r\n    return (\r\n        // <div\r\n        //     style={{\r\n        //         height: height || 450,\r\n        //     }}\r\n        // >\r\n        <DataGrid\r\n            density=\"compact\"\r\n            components={{ Toolbar: GridToolbar }}\r\n            className={classes.root}\r\n            onRowSelected={(r) => {\r\n                onRowSelected && onRowSelected(r.data);\r\n            }}\r\n            columns={cols}\r\n            rows={rows}\r\n        />\r\n        // </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Paper, withStyles, PaperProps } from \"@material-ui/core\";\r\n\r\nexport const BasePaper = withStyles((theme) => ({\r\n    root: {\r\n        borderRadius: 20,\r\n        padding: \"1em\",\r\n        boxShadow: \"rgba(0, 0, 0, 0.08) 0px 4px 12px\",\r\n    },\r\n}))((props: PaperProps) => <Paper {...props} />);\r\n\r\nexport const IconPaper = withStyles((theme) => ({\r\n    root: {\r\n        borderRadius: 10,\r\n        padding: theme.spacing(4),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"#fff\",\r\n    },\r\n}))((props: PaperProps) => <Paper {...props} elevation={5} />);\r\n","import { format } from \"date-fns\";\r\n\r\nexport const formatTimestampToDate = (timestamp: number) => {\r\n    return timestamp ? format(timestamp, \"MM/dd/yyyy\") : \"\";\r\n};\r\n","import { format } from \"date-fns\";\r\n\r\nexport const formatDate = (date: string, dateFormat: string) => {\r\n    return format(new Date(date), dateFormat);\r\n};\r\n\r\nexport const getModifiedValues = (values: any, initialValues: any) => {\r\n    let modifiedValues: any = {};\r\n\r\n    if (values) {\r\n        Object.entries(values).forEach((entry) => {\r\n            let key = entry[0];\r\n            let value = entry[1];\r\n\r\n            if (value !== initialValues[key]) {\r\n                modifiedValues[key as any] = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    return Object.keys(modifiedValues).length === 0 ? null : modifiedValues;\r\n};\r\n\r\nexport const countProperty = (data: any[], value: string, propGetter: (item: any) => any) => {\r\n    return data.filter((item) => propGetter(item) === value).length;\r\n};\r\n\r\nexport type ParameterType = {\r\n    [key: string]: string | number | boolean | null | undefined;\r\n};\r\n\r\nexport const generateQuery = (params: ParameterType) => {\r\n    const queryArray = [];\r\n    let paramValue: any = \"\";\r\n\r\n    for (const paramName in params) {\r\n        paramValue = params[paramName];\r\n\r\n        if (paramValue !== null && paramValue !== undefined && paramValue !== \"\") {\r\n            queryArray.push(`${paramName}=${paramValue}`);\r\n        }\r\n    }\r\n    \r\n    return queryArray.join(\"&\");\r\n};\r\n","import { useRef, useState } from \"react\";\r\nimport useSWR from \"swr\";\r\n\r\nimport { get } from \"../../api\";\r\nimport { useDataGridStyles } from \"../../app/BaseDataGrid\";\r\nimport { generateQuery, ParameterType } from \"../../logic/utils\";\r\n\r\nfunction useStickyResult(value: any) {\r\n    const val = useRef();\r\n    if (value !== undefined) val.current = value;\r\n    return val.current;\r\n}\r\n\r\nexport const useDataGridData = ({\r\n    params,\r\n    url,\r\n    limit,\r\n}: {\r\n    params?: ParameterType;\r\n    url: string;\r\n    limit?: number | string;\r\n}) => {\r\n    const [page, setPage] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const dataGridClasses = useDataGridStyles();\r\n\r\n    const paginationQueries = `page=${page + 1}&pageSize=${limit ? limit : 25}`;\r\n    const otherQueries = params ? generateQuery(params) + \"&\" : \"\";\r\n    const { data, mutate } = useSWR(`${url}?${otherQueries}${paginationQueries}`, async (url) => {\r\n        try {\r\n            setLoading(true);\r\n            return await get(url);\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    });\r\n    const rows: any = useStickyResult(data);\r\n\r\n    return { page, setPage, rows, mutate, loading, setLoading, dataGridClasses };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { DataGrid, GridColumns, GridFilterModelParams, GridSortModelParams, GridToolbar } from \"@material-ui/data-grid\";\r\n\r\nimport { BasePaper } from \"../../app/Paper\";\r\n\r\nimport { useDataGridData } from \"../../components/Datagrid/hooks\";\r\nimport { ParameterType } from \"../../logic/utils\";\r\n\r\nfunction FullDataGrid({\r\n    url,\r\n    columns,\r\n    height = 400,\r\n    onRowSelected,\r\n    defaultQueries,\r\n}: {\r\n    defaultQueries?: ParameterType;\r\n    columns: GridColumns;\r\n    url: string;\r\n    onRowSelected: (r: any) => void;\r\n    height?: number;\r\n}) {\r\n    const [filters, setFilters] = useState<{ [key: string]: any }>();\r\n    const [sorts, setSort] = useState<{ [key: string]: string }>();\r\n    const [limit, setLimit] = useState<string | number>();\r\n    const {\r\n        dataGridClasses,\r\n        loading,\r\n        page,\r\n        rows: items,\r\n        setPage,\r\n    } = useDataGridData({ url, params: { ...defaultQueries, ...filters, ...sorts }, limit });\r\n\r\n    const handleChangeFilter = (f: GridFilterModelParams) => {\r\n        const { columnField, value, operatorValue } = f.filterModel.items[0];\r\n\r\n        if (columnField) {\r\n            setFilters({\r\n                [`${operatorValue === \"contains\" ? \"contain\" : \"\"}${columnField}`]: value,\r\n            });\r\n            setPage(0);\r\n        } else if (columnField && !value) {\r\n            setFilters({});\r\n        }\r\n    };\r\n\r\n    const handleSortChange = (s: GridSortModelParams): void => {\r\n        if (s.sortModel[0]) {\r\n            const { field, sort } = s.sortModel[0];\r\n            if (!field || !sort) {\r\n                return;\r\n            }\r\n\r\n            setSort({ sort: field, order: sort === \"desc\" ? \"DESC\" : \"ASC\" });\r\n            setPage(0);\r\n        } else {\r\n            setSort({});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <BasePaper>\r\n            <Box height={height}>\r\n                <DataGrid\r\n                    loading={loading}\r\n                    className={dataGridClasses.root}\r\n                    onRowSelected={onRowSelected}\r\n                    pagination\r\n                    page={page}\r\n                    pageSize={25}\r\n                    rowCount={items ? items.total : 0}\r\n                    filterMode=\"server\"\r\n                    paginationMode=\"server\"\r\n                    sortingMode=\"server\"\r\n                    onSortModelChange={handleSortChange}\r\n                    onPageChange={(p) => setPage(p.page)}\r\n                    onPageSizeChange={(ps) => setLimit(ps.pageSize)}\r\n                    onFilterModelChange={handleChangeFilter}\r\n                    rows={items ? items.result : []}\r\n                    columns={columns}\r\n                    components={{ Toolbar: GridToolbar }}\r\n                />\r\n            </Box>\r\n        </BasePaper>\r\n    );\r\n}\r\n\r\nexport default FullDataGrid;\r\n"],"sourceRoot":""}