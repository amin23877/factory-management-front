{"version":3,"sources":["api/task.ts","features/TPC/autocomplete.tsx","api/tpc.ts","features/Tasks/TaskModal.tsx","features/Tasks/index.tsx","app/Button.tsx","app/Inputs/index.tsx","app/Paper.tsx","api/ticket.ts"],"names":["changeTaskDate","Yup","shape","name","required","JobId","id","date","updateTask","deadline","data","patch","filter","createFilterOptions","TPCAutocomplete","onChange","React","useState","value","setValue","open","toggleOpen","tpcs","setTPCs","refreshTPCs","a","get","resp","console","log","useEffect","handleClose","setDialogValue","dialogValue","handleSubmit","event","preventDefault","post","Fragment","Autocomplete","newValue","setTimeout","inputValue","filterOptions","options","params","filtered","push","getOptionLabel","option","selectOnFocus","clearOnBlur","handleHomeEndKeys","renderOption","freeSolo","renderInput","TextField","size","placeholder","label","title","onClose","aria-labelledby","onSubmit","DialogTitle","DialogContent","DialogContentText","autoFocus","margin","target","type","fullWidth","DialogActions","Button","onClick","color","TaskModal","onDone","selectedTask","d","handleDelete","delete_","Dialog","maxWidth","Box","initialValues","values","handleChange","handleBlur","errors","setFieldValue","display","gridTemplateColumns","gridColumnGap","gridRowGap","style","gridColumnEnd","onBlur","error","Boolean","helperText","variant","items","priority","DateTimePicker","toString","request","getTickets","job","description","getOptionValue","e","nv","assigner","getAllEmployees","emp","username","assignee","multiline","rows","kind","marginRight","Tasks","calendarEvents","setCalendarEvents","tasks","setTasks","setSelectedTask","taskModal","setTaskModal","calendar","useRef","draggableEvents","refreshTasks","refreshCalendar","ctasks","t","forEach","element","start","current","Draggable","itemSelector","eventData","eventEl","getAttribute","addEvent","draggedEl","dateStr","handleChangeEventDate","Container","Grid","container","spacing","item","xs","md","Paper","borderRadius","padding","boxShadow","Typography","my","textAlign","borderBottom","undefined","ref","map","className","initialView","rerenderDelay","eventDurationEditable","editable","droppable","plugins","dayGridPlugin","interactionPlugin","events","eventClick","getApi","task","find","drop","eventDrop","MyButton","props","useStyles","makeStyles","btnStyle","background","Gradients","success","warning","paddingRight","paddingLeft","icons","add","edit","delete","classes","startIcon","children","MaterialFieldSelect","limit","setOptions","findValue","setFindValue","o","then","slice","catch","ObjectSelect","inputStyle","itemTitleField","itemValueField","keyField","select","length","i","FieldSelect","getOptionList","setItems","ArraySelect","BaseSelect","BasePaper","withStyles","theme","root","IconPaper","flexDirection","justifyContent","alignItems","elevation","schema","LineServiceRecordId","createTicket","updateTicket"],"mappings":"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","file":"static/js/31.e9f1cbbd.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\nimport { delete_, get, patch, post } from \".\";\r\n\r\nexport interface ITask {\r\n    id: string;\r\n    name: string;\r\n    JobId: string;\r\n    description: string;\r\n    deadline: string;\r\n    assigner: string;\r\n    assignee: string;\r\n    TPCId: string;\r\n    priority?: string;\r\n}\r\n\r\nexport const schema = Yup.object().shape({\r\n    name: Yup.string().required(),\r\n    JobId: Yup.string().required(),\r\n});\r\n\r\nexport const getTasks = () => {\r\n    return get(\"/task\");\r\n};\r\n\r\nexport const createTask = (data: ITask) => {\r\n    return post(\"/task\", data);\r\n};\r\n\r\nexport const changeTaskDate = (id: string, date: string) => {\r\n    return updateTask(id, { deadline: date } as any);\r\n};\r\n\r\nexport const updateTask = (id: string, data: ITask) => {\r\n    return patch(`/task/${id}`, data);\r\n};\r\n\r\nexport const deleteTasks = (id: string) => {\r\n    return delete_(`/task/${id}`);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// import TextField from \"../../app/TextField\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\r\nimport { ITPC, getTPCs, createTPC } from \"../../api/tpc\";\r\n\r\nconst filter = createFilterOptions<ITPC>();\r\n\r\nexport default function TPCAutocomplete({ onChange }: { onChange?: (e: React.ChangeEvent<{}>, nv: string | ITPC | null) => void }) {\r\n    const [value, setValue] = React.useState<ITPC | null>(null);\r\n    const [open, toggleOpen] = React.useState(false);\r\n    const [tpcs, setTPCs] = useState<ITPC[]>([]);\r\n\r\n    const refreshTPCs = async () => {\r\n        try {\r\n            const resp = await getTPCs();\r\n            if (resp) {\r\n                setTPCs(resp);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        refreshTPCs();\r\n    }, [open]);\r\n\r\n    const handleClose = () => {\r\n        setDialogValue({\r\n            name: \"\",\r\n        });\r\n        toggleOpen(false);\r\n    };\r\n\r\n    const [dialogValue, setDialogValue] = React.useState({\r\n        name: \"\",\r\n    });\r\n\r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        try {\r\n            event.preventDefault();\r\n            if (dialogValue.name) {\r\n                const resp = await createTPC(dialogValue);\r\n                if (resp) {\r\n                    setValue({\r\n                        name: \"\",\r\n                    });\r\n                    handleClose();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Autocomplete\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    if (typeof newValue === \"string\") {\r\n                        // timeout to avoid instant validation of the dialog's form.\r\n                        setTimeout(() => {\r\n                            toggleOpen(true);\r\n                            setDialogValue({\r\n                                name: newValue,\r\n                            });\r\n                        });\r\n                    } else if (newValue && newValue.inputValue) {\r\n                        toggleOpen(true);\r\n                        setDialogValue({\r\n                            name: newValue.inputValue,\r\n                        });\r\n                    } else {\r\n                        setValue(newValue);\r\n                        onChange && onChange(event, newValue);\r\n                    }\r\n                }}\r\n                filterOptions={(options, params) => {\r\n                    const filtered = filter(options, params) as ITPC[];\r\n\r\n                    if (params.inputValue !== \"\") {\r\n                        filtered.push({\r\n                            inputValue: params.inputValue,\r\n                            name: `Add \"${params.inputValue}\"`,\r\n                        });\r\n                    }\r\n\r\n                    return filtered;\r\n                }}\r\n                id=\"tpc-autocomplete\"\r\n                options={tpcs}\r\n                getOptionLabel={(option) => {\r\n                    // e.g value selected with enter, right from the input\r\n                    if (typeof option === \"string\") {\r\n                        return option;\r\n                    }\r\n                    if (option.inputValue) {\r\n                        return option.inputValue;\r\n                    }\r\n                    return option.name;\r\n                }}\r\n                selectOnFocus\r\n                clearOnBlur\r\n                handleHomeEndKeys\r\n                renderOption={(option) => option.name}\r\n                freeSolo\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        size=\"small\"\r\n                        placeholder=\"Third party company\"\r\n                        label=\"TPC\"\r\n                        title=\"Third party company\"\r\n                        name=\"tpc\"\r\n                    />\r\n                )}\r\n            />\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"add-tpc-dialog\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <DialogTitle id=\"add-tpc-dialog\">Add a new Third party company</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Did you miss any Third party company in our list? Please, add it!</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            value={dialogValue.name}\r\n                            onChange={(event) => setDialogValue({ ...dialogValue, name: event.target.value })}\r\n                            label=\"name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Add\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { delete_, get, patch, post } from \".\";\r\n\r\nexport interface ITPC {\r\n    id?: string;\r\n    inputValue?: string;\r\n    name: string;\r\n}\r\n\r\nexport const getTPCs = () => {\r\n    return get(\"/tpc\");\r\n};\r\n\r\nexport const createTPC = (data: ITPC) => {\r\n    return post(\"/tpc\", data);\r\n};\r\n\r\nexport const updateTPC = (id: string, data: ITPC) => {\r\n    return patch(`/tpc/${id}`, data);\r\n};\r\n\r\nexport const deleteTPC = (id: string) => {\r\n    return delete_(`/tpc/${id}`);\r\n};\r\n","import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n\r\nimport Dialog from \"../../app/Dialog\";\r\nimport Button from \"../../app/Button\";\r\nimport { Box, TextField } from \"@material-ui/core\";\r\nimport { createTask, deleteTasks, ITask, updateTask } from \"../../api/task\";\r\nimport { ArraySelect, MaterialFieldSelect } from \"../../app/Inputs\";\r\nimport { getTickets } from \"../../api/ticket\";\r\nimport { getAllEmployees } from \"../../api/employee\";\r\nimport TPCAutocomplete from \"../TPC/autocomplete\";\r\nimport { DateTimePicker } from \"@material-ui/pickers\";\r\n\r\nexport default function TaskModal({\r\n    open,\r\n    onClose,\r\n    onDone,\r\n    selectedTask,\r\n}: {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onDone: () => void;\r\n    selectedTask?: ITask;\r\n}) {\r\n    const handleSubmit = async (d: any) => {\r\n        // console.log(d);\r\n        try {\r\n            if (selectedTask) {\r\n                const resp = await updateTask(selectedTask.id, d);\r\n                if (resp) {\r\n                    onDone();\r\n                    onClose();\r\n                }\r\n            } else {\r\n                const resp = await createTask(d);\r\n                if (resp) {\r\n                    onDone();\r\n                    onClose();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            if (selectedTask) {\r\n                const resp = await deleteTasks(selectedTask.id);\r\n                if (resp) {\r\n                    onDone();\r\n                    onClose();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog title=\"Task\" open={open} onClose={onClose} maxWidth=\"xs\" fullWidth>\r\n            <Box>\r\n                <Formik initialValues={selectedTask ? selectedTask : ({} as ITask)} onSubmit={handleSubmit}>\r\n                    {({ values, handleChange, handleBlur, errors, setFieldValue }) => (\r\n                        <Form>\r\n                            <Box display=\"grid\" gridTemplateColumns=\"auto auto\" gridColumnGap={5} gridRowGap={12}>\r\n                                <TextField\r\n                                    style={{ gridColumnEnd: \"span 2\" }}\r\n                                    name=\"name\"\r\n                                    label=\"Task name\"\r\n                                    value={values.name}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    error={Boolean(errors.name)}\r\n                                    helperText={errors.name}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                />\r\n                                <ArraySelect\r\n                                    style={{ gridColumnEnd: \"span 2\" }}\r\n                                    items={[\"1\", \"2\", \"3\", \"4\", \"5\"]}\r\n                                    label=\"Priority\"\r\n                                    name=\"priority\"\r\n                                    value={values.priority}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                {selectedTask && (\r\n                                    <DateTimePicker\r\n                                        name=\"deadline\"\r\n                                        style={{ gridColumnEnd: \"span 2\" }}\r\n                                        value={values.deadline || null}\r\n                                        onChange={(d) => setFieldValue(\"deadline\", d?.toString())}\r\n                                        onBlur={handleBlur}\r\n                                        error={Boolean(errors.deadline)}\r\n                                        helperText={errors.deadline}\r\n                                        size=\"small\"\r\n                                        placeholder=\"Deadline\"\r\n                                        label=\"Deadline\"\r\n                                    />\r\n                                )}\r\n                                <MaterialFieldSelect\r\n                                    value={values.JobId}\r\n                                    request={getTickets}\r\n                                    getOptionLabel={(job) => job.description}\r\n                                    getOptionValue={(job) => job.id}\r\n                                    onChange={(e, nv) => setFieldValue(\"JobId\", nv.id)}\r\n                                    onBlur={handleBlur}\r\n                                    label=\"Job\"\r\n                                />\r\n                                <MaterialFieldSelect\r\n                                    value={values.assigner}\r\n                                    request={getAllEmployees}\r\n                                    getOptionLabel={(emp) => emp.username}\r\n                                    getOptionValue={(emp) => emp.id}\r\n                                    onChange={(e, nv) => setFieldValue(\"assigner\", nv.id)}\r\n                                    onBlur={handleBlur}\r\n                                    label=\"Assigner\"\r\n                                />\r\n                                <MaterialFieldSelect\r\n                                    value={values.assignee}\r\n                                    request={getAllEmployees}\r\n                                    getOptionLabel={(emp) => emp.username}\r\n                                    getOptionValue={(emp) => emp.id}\r\n                                    onChange={(e, nv) => setFieldValue(\"assignee\", nv.id)}\r\n                                    onBlur={handleBlur}\r\n                                    label=\"Assignee\"\r\n                                />\r\n                                <TPCAutocomplete onChange={(e, nv: any) => setFieldValue(\"TPCId\", nv.id)} />\r\n                                <TextField\r\n                                    style={{ gridColumnEnd: \"span 2\" }}\r\n                                    name=\"description\"\r\n                                    label=\"Task description\"\r\n                                    value={values.description}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    error={Boolean(errors.description)}\r\n                                    helperText={errors.description}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                />\r\n                                {!selectedTask ? (\r\n                                    <Button type=\"submit\" kind=\"add\" style={{ gridColumnEnd: \"span 2\" }}>\r\n                                        Add\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Box>\r\n                                        <Button type=\"submit\" kind=\"edit\" style={{ marginRight: 8 }}>\r\n                                            Save\r\n                                        </Button>\r\n                                        <Button kind=\"delete\" onClick={handleDelete}>\r\n                                            Delete\r\n                                        </Button>\r\n                                    </Box>\r\n                                )}\r\n                            </Box>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Box, Button, Container, Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport FullCalendar, { EventClickArg, EventDropArg } from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin, { Draggable, DropArg } from \"@fullcalendar/interaction\";\r\n\r\nimport { BasePaper } from \"../../app/Paper\";\r\nimport { changeTaskDate, getTasks, ITask, updateTask } from \"../../api/task\";\r\nimport TaskModal from \"../../features/Tasks/TaskModal\";\r\n\r\nexport default function Tasks() {\r\n    const [calendarEvents, setCalendarEvents] = useState([]);\r\n    const [tasks, setTasks] = useState<ITask[]>([]);\r\n    const [selectedTask, setSelectedTask] = useState<ITask>();\r\n    const [taskModal, setTaskModal] = useState(false);\r\n    const calendar = useRef<FullCalendar | null>(null);\r\n\r\n    const draggableEvents = useRef<HTMLElement | null>();\r\n\r\n    const refreshTasks = async (refreshCalendar?: boolean) => {\r\n        try {\r\n            const resp = await getTasks();\r\n            if (resp) {\r\n                setTasks(resp);\r\n                if (refreshCalendar) {\r\n                    const ctasks = resp.filter((t: any) => Boolean(t.deadline));\r\n                    ctasks.forEach((element: any) => {\r\n                        element.title = element.name;\r\n                        element.start = element.deadline;\r\n                    });\r\n                    setCalendarEvents(ctasks);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        refreshTasks(true);\r\n\r\n        if (draggableEvents.current) {\r\n            new Draggable(draggableEvents.current, {\r\n                itemSelector: \".fc-event\",\r\n                eventData: (eventEl) => {\r\n                    let title = eventEl.getAttribute(\"title\");\r\n                    let id = eventEl.getAttribute(\"id\");\r\n                    return { title, id };\r\n                },\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const addEvent = async (e: DropArg) => {\r\n        try {\r\n            const resp = await changeTaskDate(e.draggedEl.id, e.dateStr);\r\n            if (resp) {\r\n                refreshTasks();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleChangeEventDate = async (e: EventDropArg) => {\r\n        try {\r\n            if (e.event.start?.toString()) {\r\n                const resp = await changeTaskDate(e.event.id, e.event.start?.toString());\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleEventClick = (e: EventClickArg) => {\r\n        console.log(calendar.current?.getApi());\r\n        if (e.event.id) {\r\n            const task = tasks.find((t) => t.id === e.event.id);\r\n            if (task) {\r\n                setSelectedTask(task);\r\n                setTaskModal(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddTaskClick = () => {\r\n        setSelectedTask(undefined);\r\n        setTaskModal(true);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <TaskModal\r\n                open={taskModal}\r\n                onClose={() => setTaskModal(false)}\r\n                onDone={() => refreshTasks(true)}\r\n                selectedTask={selectedTask}\r\n            />\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} md={2}>\r\n                    <Paper\r\n                        style={{\r\n                            borderRadius: 20,\r\n                            padding: \"1em\",\r\n                            boxShadow: \"rgba(0, 0, 0, 0.08) 0px 4px 12px\",\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"h6\">Tasks</Typography>\r\n                        <Box my={2} textAlign=\"center\" borderBottom=\"2px solid #cccc\">\r\n                            <Button onClick={handleAddTaskClick}>Add new task</Button>\r\n                        </Box>\r\n                        <div id=\"external-events\" ref={(e) => (draggableEvents.current = e)}>\r\n                            {tasks.map(\r\n                                (e) =>\r\n                                    !e.deadline && (\r\n                                        <div className=\"fc-event\" title={e.name} key={e.id} id={e.id}>\r\n                                            {e.name}\r\n                                        </div>\r\n                                    )\r\n                            )}\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={10}>\r\n                    <BasePaper>\r\n                        <FullCalendar\r\n                            ref={(e) => (calendar.current = e)}\r\n                            initialView=\"dayGridMonth\"\r\n                            rerenderDelay={10}\r\n                            eventDurationEditable={false}\r\n                            editable={true}\r\n                            droppable={true}\r\n                            plugins={[dayGridPlugin, interactionPlugin]}\r\n                            events={calendarEvents}\r\n                            eventClick={handleEventClick}\r\n                            drop={addEvent}\r\n                            eventDrop={handleChangeEventDate}\r\n                        />\r\n                    </BasePaper>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button, ButtonProps, makeStyles } from \"@material-ui/core\";\r\nimport { AddRounded, EditRounded, DeleteRounded } from \"@material-ui/icons\";\r\n\r\nimport { Gradients } from \"../theme\";\r\n\r\ninterface IButton extends ButtonProps {\r\n    kind?: \"add\" | \"edit\" | \"delete\";\r\n}\r\nexport default function MyButton({ kind, ...props }: IButton) {\r\n    const useStyles = makeStyles({\r\n        btnStyle: {\r\n            background: kind\r\n                ? kind === \"add\"\r\n                    ? Gradients.success\r\n                    : kind === \"edit\"\r\n                    ? Gradients.warning\r\n                    : Gradients.error\r\n                : \"default\",\r\n            borderRadius: \"0.5em\",\r\n            boxShadow: \"none\",\r\n            paddingRight: \"25px\",\r\n            paddingLeft: \"25px\",\r\n        },\r\n    });\r\n    let icons = {\r\n        add: <AddRounded />,\r\n        edit: <EditRounded />,\r\n        delete: <DeleteRounded />,\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.btnStyle}\r\n            startIcon={kind ? icons[kind] : props.startIcon}\r\n            variant={kind ? \"contained\" : props.variant}\r\n            color={kind ? \"primary\" : props.color}\r\n            {...props}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, TextField, StandardTextFieldProps } from \"@material-ui/core\";\r\n// import { BootstrapInput } from \"../TextField\";\r\n\r\n// import styles from \"./inputs.module.css\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { CSSProperties } from \"@material-ui/styles\";\r\n\r\ninterface IMFS {\r\n    request: () => Promise<any>;\r\n    limit?: number;\r\n    label?: string;\r\n    getOptionLabel: (option: any) => string;\r\n    getOptionValue: (option: any) => string;\r\n    onChange?: (e: React.ChangeEvent<{}>, newValue: any) => void;\r\n    onBlur?: React.FocusEventHandler<HTMLDivElement>;\r\n    error?: boolean;\r\n    placeholder?: string;\r\n    style?: CSSProperties;\r\n    value?: any;\r\n}\r\nexport const MaterialFieldSelect = ({\r\n    request,\r\n    limit,\r\n    getOptionLabel,\r\n    getOptionValue,\r\n    onChange,\r\n    value,\r\n    ...props\r\n}: IMFS) => {\r\n    const [options, setOptions] = useState([]);\r\n    const [findValue, setFindValue] = useState<any>();\r\n\r\n    useEffect(() => {\r\n        const t = options.find((o) => getOptionValue(o) === value);\r\n        setFindValue(t);\r\n    }, [value, options, getOptionValue]);\r\n\r\n    useEffect(() => {\r\n        request()\r\n            .then((data) => {\r\n                if (limit && limit > 0) {\r\n                    setOptions(data.slice(0, limit));\r\n                } else {\r\n                    setOptions(data);\r\n                }\r\n            })\r\n            .catch((e) => console.log(e));\r\n    }, [limit, request]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            style={props.style as any}\r\n            getOptionLabel={getOptionLabel}\r\n            options={options}\r\n            onChange={onChange}\r\n            onBlur={props.onBlur}\r\n            value={findValue}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label={props?.label}\r\n                    error={props.error}\r\n                    placeholder={props.placeholder}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\ninterface IOS extends StandardTextFieldProps {\r\n    items: any[];\r\n    itemValueField: string;\r\n    itemTitleField: string;\r\n    keyField?: string;\r\n    inputStyle?: any;\r\n}\r\nexport const ObjectSelect = ({ inputStyle, items, itemTitleField, itemValueField, keyField, ...props }: IOS) => {\r\n    return (\r\n        <TextField {...props} variant=\"outlined\" size=\"small\" select>\r\n            <MenuItem value={undefined}>None</MenuItem>\r\n            {items &&\r\n                items.length >= 0 &&\r\n                items.map((item: any, i) => (\r\n                    <MenuItem key={keyField ? item[keyField] : i} value={item[itemValueField]}>\r\n                        {item[itemTitleField]}\r\n                    </MenuItem>\r\n                ))}\r\n        </TextField>\r\n    );\r\n};\r\n\r\ninterface IFieldSelect extends StandardTextFieldProps {\r\n    request: () => Promise<any>;\r\n    getOptionList?: (data: any) => any;\r\n    itemValueField: string;\r\n    itemTitleField: string;\r\n    limit?: number;\r\n    keyField?: string;\r\n}\r\nexport const FieldSelect = ({\r\n    keyField,\r\n    request,\r\n    itemValueField,\r\n    itemTitleField,\r\n    limit,\r\n    getOptionList,\r\n    ...props\r\n}: IFieldSelect) => {\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        request()\r\n            .then((data) => {\r\n                if (limit && limit > 0) {\r\n                    let options = getOptionList ? getOptionList(data) : data.slice(0, limit);\r\n                    setItems(options);\r\n                } else {\r\n                    let options = getOptionList ? getOptionList(data) : data;\r\n                    setItems(options);\r\n                }\r\n            })\r\n            .catch((e) => console.log(e));\r\n    }, [getOptionList, limit, request]);\r\n\r\n    return <ObjectSelect {...props} itemTitleField={itemTitleField} itemValueField={itemValueField} items={items} />;\r\n};\r\n\r\ninterface IArraySelect extends StandardTextFieldProps {\r\n    items?: any[];\r\n}\r\nexport const ArraySelect = ({ items, ...props }: IArraySelect) => {\r\n    return (\r\n        <ObjectSelect\r\n            itemTitleField=\"item\"\r\n            itemValueField=\"item\"\r\n            items={items ? items.map((item) => ({ item: item })) : []}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport const BaseSelect = (props: StandardTextFieldProps) => {\r\n    return (\r\n        <TextField {...props} variant=\"outlined\" size=\"small\" select>\r\n            {props.children}\r\n        </TextField>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Paper, withStyles, PaperProps } from \"@material-ui/core\";\r\n\r\nexport const BasePaper = withStyles((theme) => ({\r\n    root: {\r\n        borderRadius: 20,\r\n        padding: \"1em\",\r\n        boxShadow: \"rgba(0, 0, 0, 0.08) 0px 4px 12px\",\r\n    },\r\n}))((props: PaperProps) => <Paper {...props} />);\r\n\r\nexport const IconPaper = withStyles((theme) => ({\r\n    root: {\r\n        borderRadius: 10,\r\n        padding: theme.spacing(4),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"#fff\",\r\n    },\r\n}))((props: PaperProps) => <Paper {...props} elevation={5} />);\r\n","import * as Yup from \"yup\";\r\nimport { delete_, get, patch, post } from \".\";\r\nimport { IItem } from \"./items\";\r\n\r\nexport interface ITicket {\r\n    id: string;\r\n    productionStatus: string;\r\n    name: string;\r\n    ContactId: string;\r\n    LineServiceRecordId: any;\r\n    tags: string;\r\n    callTime: number;\r\n    description: string;\r\n    status: string;\r\n    deadline: number;\r\n    subject: string;\r\n    priority: string;\r\n    note: string;\r\n    fsh: boolean;\r\n    ItemId: IItem;\r\n\r\n    createdAt: number;\r\n    updatedAt: number;\r\n    __v: number;\r\n}\r\n\r\nexport const schema = Yup.object().shape({\r\n    LineServiceRecordId: Yup.string().required(),\r\n});\r\n\r\nexport const getTickets = () => {\r\n    return get(\"/ticket\");\r\n};\r\n\r\nexport const createTicket = (data: ITicket) => {\r\n    return post(\"/ticket\", data);\r\n};\r\n\r\nexport const updateTicket = (id: string, data: ITicket) => {\r\n    return patch(`/ticket/${id}`, data);\r\n};\r\n\r\nexport const deleteTicket = (id: string) => {\r\n    return delete_(`/ticket/${id}`);\r\n};\r\n"],"sourceRoot":""}