{"version":3,"sources":["features/Modals/ProjectModals.tsx","features/Activity/ActivityModal.tsx","pages/Project.tsx","app/Button.tsx","app/BaseDataGrid.tsx","app/Inputs/index.tsx","api/contact.ts","app/Tabs.tsx","api/customer.ts","api/quote.ts","api/project.ts","../node_modules/@material-ui/icons/esm/EditRounded.js","../node_modules/@material-ui/icons/esm/DeleteRounded.js","api/activity.ts"],"names":["ProjectModal","open","onClose","data","onDone","useState","name","setName","useEffect","handleDelete","a","deleteProject","id","console","log","handleSubmit","e","preventDefault","updateProject","createProject","Dialog","maxWidth","fullWidth","title","onSubmit","Box","m","display","flexDirection","justifyContent","alignItems","TextField","label","style","flex","width","marginBottom","value","onChange","target","marginLeft","marginRight","onClick","kind","type","flexGrow","schema","Yup","shape","required","ActivityModal","activity","setSubmitting","p","initialValues","validationSchema","values","errors","touched","handleChange","handleBlur","gridTemplateColumns","gridColumnGap","gridRowGap","error","Boolean","onBlur","subject","location","notes","startTime","endTime","request","getCustomers","itemTitleField","itemValueField","ClientId","getContacts","ContactId","fetcher","ActivityPriorityId","getProjects","ProjectId","getAllEmployees","EmployeeId","getQuotes","QuoteId","ActivityCategoryId","ActivityStatusId","mt","FormControlLabel","control","checked","allDayActivity","notifyOnDay","recurring","notifyNow","doNotShowOnCalendar","Project","activeTab","setActiveTab","pData","setPData","projects","setProjects","activities","setActivities","selectedActivity","setSelectedActivity","projectModal","setProjectModal","activityModal","setActivityModal","refreshProjects","useCallback","resp","refreshActivities","getProjectActivities","my","Button","undefined","disabled","nv","BaseDataGrid","cols","field","onRowSelected","rows","valueGetter","row","ActivityPriority","ActivityStatus","d","MyButton","props","useStyles","makeStyles","btnStyle","background","Gradients","success","warning","icons","add","edit","delete","classes","className","startIcon","variant","color","children","useDataGridStyles","root","backgroundColor","border","height","opacity","boxShadow","fill","density","components","Toolbar","GridToolbar","r","columns","ScrollDataGrid","MaterialFieldSelect","limit","getOptionLabel","getOptionValue","options","setOptions","findValue","setFindValue","t","find","o","then","slice","catch","renderInput","params","placeholder","size","ObjectSelect","inputStyle","items","keyField","select","length","map","item","i","FieldSelect","getOptionList","setItems","ArraySelect","BaseSelect","get","getAllModelContact","model","createAModelContact","post","updateAModelContact","patch","deleteAModelContact","delete_","MyTabs","withStyles","minHeight","borderRadius","indicator","Tabs","MyTab","theme","createStyles","textTransform","minWidth","selected","disableRipple","addCustomer","customer","deleteCustomer","editCustomer","getQuoteById","createQuote","createQuoteComplete","updateQuote","deleteQuote","pId","createSvgIcon","React","createElement","getActivities","projectId","createActivity","updateActivity","deleteActivity"],"mappings":"8QAQaA,EAAe,SAAC,GAA6G,IAA3GC,EAA0G,EAA1GA,KAAMC,EAAoG,EAApGA,QAASC,EAA2F,EAA3FA,KAAMC,EAAqF,EAArFA,OAAqF,EAC7GC,mBAAQ,OAACF,QAAD,IAACA,OAAD,EAACA,EAAMG,MAD8F,mBAC9HA,EAD8H,KACxHC,EADwH,KAGrIC,qBAAU,WACND,EAAO,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAMG,QACf,CAACH,IAEJ,IAAMM,EAAY,uCAAG,sBAAAC,EAAA,mEAETP,EAFS,gCAGHQ,YAAcR,EAAKS,IAHhB,OAITR,IACAF,IALS,uDAQbW,QAAQC,IAAR,MARa,yDAAH,qDAYZC,EAAY,uCAAG,WAAOC,GAAP,SAAAN,EAAA,yDACjBM,EAAEC,iBADe,UAGTd,EAHS,gCAIHe,YAAcf,EAAKS,GAAI,CAAEN,SAJtB,OAKTF,IACAF,IANS,wCAQHiB,YAAcb,GARX,QASTF,IACAF,IAVS,0DAabW,QAAQC,IAAR,MAba,0DAAH,sDAiBlB,OACI,cAACM,EAAA,EAAD,CAAQnB,KAAMA,EAAMC,QAASA,EAASmB,SAAS,KAAKC,WAAS,EAACC,MAAOpB,EAAO,eAAiB,kBAA7F,SACI,sBAAMqB,SAAUT,EAAhB,SACI,eAACU,EAAA,EAAD,CAAKC,EAAG,EAAGC,QAAQ,OAAOC,cAAc,SAASC,eAAe,SAASC,WAAW,SAApF,UACI,cAACC,EAAA,EAAD,CAAWC,MAAM,OAAOC,MAAO,CAACC,KAAK,EAAEC,MAAM,OAAOC,aAAa,QAASd,WAAS,EAACe,MAAO/B,EAAMgC,SAAU,SAACtB,GAAD,OAAOT,EAAQS,EAAEuB,OAAOF,UACnI,eAACZ,EAAA,EAAD,CAAKQ,MAAO,CAACE,MAAM,OAAOR,QAAQ,QAAlC,UACKxB,GACG,cAAC,IAAD,CAAQ8B,MAAO,CAAEO,WAAY,MAAMC,YAAY,QAAUC,QAASjC,EAAckC,KAAK,SAArF,oBAIJ,cAAC,IAAD,CAAQA,KAAK,MAAMC,KAAK,SAASX,MAAO,CAACY,SAAS,EAAEJ,YAAY,OAAhE,6B,uFClClBK,EAASC,MAAaC,MAAM,CAC9B1C,KAAMyC,MAAaE,aAER,SAASC,EAAT,GAQX,IAPAjD,EAOD,EAPCA,KACAC,EAMD,EANCA,QACAiD,EAKD,EALCA,SAMMpC,EAAY,uCAAG,WAAOZ,EAAP,YAAAO,EAAA,wDAA0B0C,cAC3CvC,QAAQC,IAAIX,GADK,2CAAH,wDAIlB,OACI,cAACiB,EAAA,EAAD,CAAQnB,KAAMA,EAAMC,QAASA,EAASqB,MAAM,oBAA5C,SACI,cAACE,EAAA,EAAD,CAAK4B,EAAG,EAAR,SACI,cAAC,IAAD,CAAQC,cAAeH,EAAUI,iBAAkBT,EAAQtB,SAAUT,EAArE,SACK,gBAAGyC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAA1C,OACG,eAAC,IAAD,WACI,eAACnC,EAAA,EAAD,CAAKE,QAAQ,OAAOkC,oBAAoB,iBAAiBC,cAAe,GAAIC,WAAY,EAAxF,UACI,cAAChC,EAAA,EAAD,CACIiC,MAAOC,QAAQR,EAAOnD,MAAQoD,EAAQpD,MACtCA,KAAK,OACL0B,MAAM,OACNK,MAAOmB,EAAOlD,KACdgC,SAAUqB,EACVO,OAAQN,IAEZ,cAAC7B,EAAA,EAAD,CACIzB,KAAK,UACL0B,MAAM,UACNK,MAAOmB,EAAOW,QACd7B,SAAUqB,EACVO,OAAQN,IAEZ,cAAC7B,EAAA,EAAD,CACIzB,KAAK,WACL0B,MAAM,WACNK,MAAOmB,EAAOY,SACd9B,SAAUqB,EACVO,OAAQN,IAEZ,cAAC7B,EAAA,EAAD,CACIzB,KAAK,QACL0B,MAAM,QACNK,MAAOmB,EAAOa,MACd/B,SAAUqB,EACVO,OAAQN,IAEZ,cAAC7B,EAAA,EAAD,CACIa,KAAK,OACLtC,KAAK,YACL0B,MAAM,aACNK,MAAOmB,EAAOc,UACdhC,SAAUqB,EACVO,OAAQN,IAEZ,cAAC7B,EAAA,EAAD,CACIa,KAAK,OACLtC,KAAK,UACL0B,MAAM,WACNK,MAAOmB,EAAOe,QACdjC,SAAUqB,EACVO,OAAQN,IAEZ,cAAC,IAAD,CACIY,QAASC,IACTC,eAAe,OACfC,eAAe,KACf3C,MAAM,SACN1B,KAAK,WACL+B,MAAOmB,EAAOoB,SACdtC,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAGpB,cAAC,IAAD,CACIH,MAAM,UACN1B,KAAK,YACLkE,QAASK,IACTH,eAAe,WACfC,eAAe,KACftC,MAAOmB,EAAOsB,UACdxC,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAEpB,cAAC,IAAD,CACIH,MAAM,qBACN1B,KAAK,qBACLkE,QAAS,kBAAMO,YAAQ,sBACvBL,eAAe,OACfC,eAAe,KACftC,MAAOmB,EAAOwB,mBACd1C,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAEpB,cAAC,IAAD,CACIH,MAAM,UACN1B,KAAK,YACLkE,QAASS,IACTP,eAAe,OACfC,eAAe,KACftC,MAAOmB,EAAO0B,UACd5C,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAEpB,cAAC,IAAD,CACIH,MAAM,WACN1B,KAAK,aACLkE,QAASW,IACTT,eAAe,WACfC,eAAe,KACftC,MAAOmB,EAAO4B,WACd9C,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAEpB,cAAC,IAAD,CACIH,MAAM,QACN1B,KAAK,UACLkE,QAASa,IACTX,eAAe,SACfC,eAAe,KACftC,MAAOmB,EAAO8B,QACdhD,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAEpB,cAAC,IAAD,CACIH,MAAM,qBACN1B,KAAK,qBACLkE,QAAS,kBAAMO,YAAQ,sBACvBL,eAAe,OACfC,eAAe,KACftC,MAAOmB,EAAO+B,mBACdjD,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,UAEpB,cAAC,IAAD,CACIH,MAAM,mBACN1B,KAAK,mBACLkE,QAAS,kBAAMO,YAAQ,oBACvBL,eAAe,OACfC,eAAe,KACftC,MAAOmB,EAAOgC,iBACdlD,SAAUqB,EACVO,OAAQN,EACR3B,MAAO,CAAEE,MAAO,aAGxB,eAACV,EAAA,EAAD,CAAKgE,GAAI,EAAG9D,QAAQ,OAAOkC,oBAAoB,iBAAiBC,cAAe,GAA/E,UACI,cAAC4B,EAAA,EAAD,CACIpF,KAAK,iBACLqF,QAAS,cAAC,IAAD,IACT3D,MAAM,mBACN4D,QAASpC,EAAOqC,eAChBvD,SAAUqB,EACVO,OAAQN,IAEZ,cAAC8B,EAAA,EAAD,CACIpF,KAAK,cACLqF,QAAS,cAAC,IAAD,IACT3D,MAAM,gBACN4D,QAASpC,EAAOsC,YAChBxD,SAAUqB,EACVO,OAAQN,IAEZ,cAAC8B,EAAA,EAAD,CACIpF,KAAK,YACLqF,QAAS,cAAC,IAAD,IACT3D,MAAM,YACN4D,QAASpC,EAAOuC,UAChBzD,SAAUqB,EACVO,OAAQN,IAEZ,cAAC8B,EAAA,EAAD,CACIpF,KAAK,YACLqF,QAAS,cAAC,IAAD,IACT3D,MAAM,aACN4D,QAASpC,EAAOwC,UAChB1D,SAAUqB,EACVO,OAAQN,IAEZ,cAAC8B,EAAA,EAAD,CACIpF,KAAK,sBACLqF,QAAS,cAAC,IAAD,IACT3D,MAAM,0BACN4D,QAASpC,EAAOyC,oBAChB3D,SAAUqB,EACVO,OAAQN,iB,aC9M7B,SAASsC,IAAW,IAAD,EACI7F,mBAAS,GADb,mBACvB8F,EADuB,KACZC,EADY,OAEJ/F,qBAFI,mBAEvBgG,EAFuB,KAEhBC,EAFgB,OAGEjG,mBAAS,IAHX,mBAGvBkG,EAHuB,KAGbC,EAHa,OAIMnG,mBAAS,IAJf,mBAIvBoG,EAJuB,KAIXC,EAJW,OAKkBrG,qBALlB,mBAKvBsG,EALuB,KAKLC,EALK,OAOUvG,oBAAS,GAPnB,mBAOvBwG,EAPuB,KAOTC,EAPS,OAQYzG,oBAAS,GARrB,mBAQvB0G,EARuB,KAQRC,EARQ,KAUxBC,EAAkBC,sBAAW,sBAAC,4BAAAxG,EAAA,+EAETuE,cAFS,OAEtBkC,EAFsB,OAG5BX,EAAYW,GACZb,EAAS,MAJmB,gDAM5BzF,QAAQC,IAAR,MAN4B,yDAQjC,CAAC0F,EAAaF,IAEXc,EAAoBF,sBAAW,sBAAC,4BAAAxG,EAAA,mEAE1B2F,EAF0B,gCAGPgB,YAAqBhB,EAAMzF,IAHpB,OAGpBuG,EAHoB,OAI1BT,EAAcS,GAJY,uDAO9BtG,QAAQC,IAAR,MAP8B,yDASnC,CAACuF,EAAOK,IAEXlG,qBAAU,WACNyG,MACD,CAACA,IAEJzG,qBAAU,WACY,IAAd2F,GACAiB,MAEL,CAACjB,EAAWiB,IAef,OACI,qCACI,cAAC,EAAD,CACInH,KAAM4G,EACN3G,QAAS,kBAAM4G,GAAgB,IAC/B1G,OAAQ6G,EACR9G,KAAMkG,IAETM,GACG,cAACzD,EAAD,CACIjD,KAAM8G,EACN7G,QAAS,kBAAM8G,GAAiB,IAChC7D,SAAUwD,IAIlB,eAAClF,EAAA,EAAD,CAAK6F,GAAI,EAAG3F,QAAQ,OAAOG,WAAW,SAAtC,UACI,cAACyF,EAAA,EAAD,CACI7E,QAAS,WACLoE,GAAgB,GAChBR,OAASkB,IAHjB,6BAQA,cAACD,EAAA,EAAD,CAAQ7E,QAAS,kBAAMoE,GAAgB,IAAOW,UAAWpB,EAAzD,0BAGA,qBAAKpE,MAAO,CAAEY,SAAU,KACxB,eAAC,IAAD,CAAQR,MAAO8D,EAAW7D,SAAU,SAACtB,EAAG0G,GAAJ,OAAWtB,EAAasB,IAA5D,UACI,cAAC,IAAD,CAAO1F,MAAM,aACb,cAAC,IAAD,CAAOA,MAAM,kBAGrB,eAACP,EAAA,EAAD,WACmB,IAAd0E,GACG,cAACwB,EAAA,EAAD,CACIC,KAvCO,CAAC,CAAEC,MAAO,SAwCjBC,cAAe,SAAC3H,GACZmG,EAASnG,GACTiG,EAAa,IAEjB2B,KAAMxB,IAGC,IAAdJ,GACG,eAAC1E,EAAA,EAAD,WACI,4CACA,cAACkG,EAAA,EAAD,CACIC,KA9DW,CAC/B,CAAEC,MAAO,QACT,CAAEA,MAAO,WACT,CAAEA,MAAO,YACT,CAAEA,MAAO,YAAa1F,MAAO,KAC7B,CAAE0F,MAAO,UAAW1F,MAAO,KAC3B,CAAE0F,MAAO,mBAAoBG,YAAa,SAAC7H,GAAD,uBAAUA,EAAK8H,IAAIC,wBAAnB,aAAU,EAA2B5H,MAAM6B,MAAO,KAC5F,CAAE0F,MAAO,iBAAkBG,YAAa,SAAC7H,GAAD,uBAAUA,EAAK8H,IAAIE,sBAAnB,aAAU,EAAyB7H,MAAM6B,MAAO,KACxF,CAAE0F,MAAO,UAuDWE,KAAMtB,EACNqB,cAAe,SAACM,GACZxB,EAAoBwB,GACpBpB,GAAiB,iB,0JC9GlC,SAASqB,EAAT,GAAgD,IAA5B1F,EAA2B,EAA3BA,KAAS2F,EAAkB,wBACpDC,EAAYC,YAAW,CACzBC,SAAU,CACNC,WAAY/F,EAAiB,QAATA,EAAiBgG,IAAUC,QAAmB,SAATjG,EAAkBgG,IAAUE,QAAUF,IAAU3E,MAAS,aAGtH8E,EAAQ,CACRC,IAAK,cAAC,IAAD,IACLC,KAAM,cAAC,IAAD,IACNC,OAAQ,cAAC,IAAD,KAGNC,EAAUX,IAEhB,OACI,cAAC,IAAD,yBACIY,UAAWD,EAAQT,SACnBW,UAAWzG,EAAOmG,EAAMnG,GAAQ2F,EAAMc,UACtCC,QAAS1G,EAAO,YAAc2F,EAAMe,QACpCC,MAAO3G,EAAO,UAAY2F,EAAMgB,OAC5BhB,GALR,aAOKA,EAAMiB,c,2KC3BNC,EAAoBhB,YAAW,CACxCiB,KAAM,CACFC,gBAAiB,UACjBC,OAAQ,OAER,kCAAmC,CAC/BD,gBAAiB,UACjBJ,MAAO,QAGX,+BAAgC,CAC5B3H,QAAS,OACTQ,MAAO,EACPyH,OAAQ,EACRC,QAAS,GAEb,kBAAmB,CACfC,UAAW,yCACXJ,gBAAiB,mBAErB,0BAA2B,CACvBK,KAAM,YAaH,SAASpC,EAAT,GAA6E,IAArDG,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,KAAMH,EAA+B,EAA/BA,KAAMgC,EAAyB,EAAzBA,OACxDV,EAAUM,IAEhB,OACI,qBACIvH,MAAO,CACHY,SAAU,EACV+G,OAAQA,GAAU,KAH1B,SAMI,cAAC,IAAD,CACII,QAAQ,UACRC,WAAY,CAAEC,QAASC,KACvBhB,UAAWD,EAAQO,KACnB3B,cAAe,SAACsC,GACZtC,GAAiBA,EAAcsC,EAAEjK,OAErCkK,QAASzC,EACTG,KAAMA,MAMf,IAAMuC,EAAiB,SAAC,GAA0D,IAAxDxC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,KAAMH,EAAkC,EAAlCA,KAC5CsB,GAD8E,EAA5BU,OACxCJ,KAEhB,OAMI,aALA,CAKC,IAAD,CACIQ,QAAQ,UACRC,WAAY,CAAEC,QAASC,KACvBhB,UAAWD,EAAQO,KACnB3B,cAAe,SAACsC,GACZtC,GAAiBA,EAAcsC,EAAEjK,OAErCkK,QAASzC,EACTG,KAAMA,M,+OC1DLwC,EAAsB,SAAC,GAQvB,IAPT/F,EAOQ,EAPRA,QACAgG,EAMQ,EANRA,MACAC,EAKQ,EALRA,eACAC,EAIQ,EAJRA,eACApI,EAGQ,EAHRA,SACAD,EAEQ,EAFRA,MACGiG,EACK,0FACsBjI,mBAAS,IAD/B,mBACDsK,EADC,KACQC,EADR,OAE0BvK,qBAF1B,mBAEDwK,EAFC,KAEUC,EAFV,KAqBR,OAjBAtK,qBAAU,WACN,IAAMuK,EAAIJ,EAAQK,MAAK,SAACC,GAAD,OAAOP,EAAeO,KAAO5I,KACpDyI,EAAaC,KACd,CAAC1I,EAAOsI,EAASD,IAEpBlK,qBAAU,WACNgE,IACK0G,MAAK,SAAC/K,GAECyK,EADAJ,GAASA,EAAQ,EACNrK,EAAKgL,MAAM,EAAGX,GAEdrK,MAGlBiL,OAAM,SAACpK,GAAD,OAAOH,QAAQC,IAAIE,QAC/B,CAACwJ,EAAOhG,IAGP,cAAC,IAAD,CACIvC,MAAOqG,EAAMrG,MACbwI,eAAgBA,EAChBE,QAASA,EACTrI,SAAUA,EACV4B,OAAQoE,EAAMpE,OACd7B,MAAOwI,EACPQ,YAAa,SAACC,GAAD,OACT,cAAC,IAAD,2BACQA,GADR,IAEItJ,MAAK,OAAEsG,QAAF,IAAEA,OAAF,EAAEA,EAAOtG,MACdgC,MAAOsE,EAAMtE,MACbuH,YAAajD,EAAMiD,YACnBC,KAAK,QACLnC,QAAQ,kBAcfoC,EAAe,SAAC,GAAmF,EAAjFC,WAAkF,IAAtEC,EAAqE,EAArEA,MAAOjH,EAA8D,EAA9DA,eAAgBC,EAA8C,EAA9CA,eAAgBiH,EAA8B,EAA9BA,SAAatD,EAAiB,mFAC5G,OACI,eAAC,IAAD,2BAAeA,GAAf,IAAsBe,QAAQ,WAAWmC,KAAK,QAAQK,QAAM,EAA5D,UACI,cAAC,IAAD,CAAUxJ,WAAOmF,EAAjB,kBACCmE,GACGA,EAAMG,QAAU,GAChBH,EAAMI,KAAI,SAACC,EAAWC,GAAZ,OACN,cAAC,IAAD,CAA8C5J,MAAO2J,EAAKrH,GAA1D,SACKqH,EAAKtH,IADKkH,EAAWI,EAAKJ,GAAYK,WAgBlDC,EAAc,SAAC,GAQR,EAPhBN,SAOiB,IANjBpH,EAMgB,EANhBA,QACAG,EAKgB,EALhBA,eACAD,EAIgB,EAJhBA,eACA8F,EAGgB,EAHhBA,MACA2B,EAEgB,EAFhBA,cACG7D,EACa,kGACUjI,mBAAS,IADnB,mBACTsL,EADS,KACFS,EADE,KAiBhB,OAdA5L,qBAAU,WACNgE,IACK0G,MAAK,SAAC/K,GACH,GAAIqK,GAASA,EAAQ,EAAG,CACpB,IAAIG,EAAUwB,EAAgBA,EAAchM,GAAQA,EAAKgL,MAAM,EAAGX,GAClE4B,EAASzB,OACN,CACH,IAAIA,EAAUwB,EAAgBA,EAAchM,GAAQA,EACpDiM,EAASzB,OAGhBS,OAAM,SAACpK,GAAD,OAAOH,QAAQC,IAAIE,QAC/B,CAACmL,EAAe3B,EAAOhG,IAEnB,cAACiH,EAAD,2BAAkBnD,GAAlB,IAAyB5D,eAAgBA,EAAgBC,eAAgBA,EAAgBgH,MAAOA,MAM9FU,EAAc,SAAC,GAAuC,IAArCV,EAAoC,EAApCA,MAAUrD,EAA0B,yBAC9D,OACI,cAACmD,EAAD,aACI/G,eAAe,OACfC,eAAe,OACfgH,MAAOA,EAAQA,EAAMI,KAAI,SAACC,GAAD,MAAW,CAAEA,KAAMA,MAAW,IACnD1D,KAKHgE,EAAa,SAAChE,GACvB,OACI,cAAC,IAAD,2BAAeA,GAAf,IAAsBe,QAAQ,WAAWmC,KAAK,QAAQK,QAAM,EAA5D,SACKvD,EAAMiB,c,iCCnJnB,sLAgBa1E,EAAc,WACvB,OAAO0H,YAAI,aAGFC,EAAqB,SAACC,EAAe7L,GAC9C,OAAO2L,YAAI,YAAD,OAAaE,EAAb,YAAsB7L,KAGvB8L,EAAsB,SAACD,EAAe7L,EAAYT,GAC3D,OAAOwM,YAAK,YAAD,OAAaF,EAAb,YAAsB7L,GAAMT,IAG9ByM,EAAsB,SAAChM,EAAYT,GAC5C,OAAO0M,YAAM,YAAD,OAAajM,GAAMT,IAGtB2M,EAAsB,SAAClM,GAChC,OAAOmM,YAAQ,YAAD,OAAanM,M,mKCKlBoM,EAASC,YAAW,CAC7BxD,KAAM,CACFyD,UAAW,OACXvD,OAAQ,oBACRwD,aAAc,SAElBC,UAAW,CACP1D,gBAAiB,OACjBE,OAAQ,IARMqD,CAUnBI,KAQUC,EAAQL,aAAW,SAACM,GAAD,OAC5BC,YAAa,CACT/D,KAAM,CACFgE,cAAe,OACfC,SAAU,MACVR,UAAW,OACX,UAAW,CACP5D,MAAO,OACPO,QAAS,GAEb,aAAc,CACVH,gBAAiB,UACjByD,aAAc,QACd7D,MAAO,QAEX,WAAY,CACR6D,aAAc,QACd7D,MAAO,QAEX,UAAW,CACP6D,aAAc,QACd7D,MAAO,SAGfqE,SAAU,OAxBGV,EA0BnB,SAAC3E,GAAD,OAAgB,cAAC,IAAD,aAAKsF,eAAa,GAAKtF,Q,iCClFzC,oJA4Ba7D,EAAe,WACxB,OAAO8H,YAAI,cAGFsB,EAAc,SAACC,GACxB,OAAOnB,YAAK,YAAamB,IAGhBC,EAAiB,SAACnN,GAC3B,OAAOmM,YAAQ,aAAD,OAAcnM,KAGnBoN,EAAe,SAACpN,EAAYT,GACrC,OAAO0M,YAAM,aAAD,OAAcjM,GAAMT,K,iCCzCpC,wNAqFakF,EAAY,WACrB,OAAOkH,YAAI,WAGF0B,EAAe,SAACrN,GACzB,OAAO2L,YAAI,UAAD,OAAW3L,KAGZsN,EAAc,SAAC/N,GACxB,OAAOwM,YAAK,SAAUxM,IAEbgO,EAAsB,SAAChO,GAChC,OAAOwM,YAAK,SAAUxM,IAGbiO,EAAc,SAACxN,EAAYT,GACpC,OAAO0M,YAAM,UAAD,OAAWjM,GAAMT,IAGpBkO,EAAc,SAACzN,GACxB,OAAOmM,YAAQ,UAAD,OAAWnM,M,iCCzG7B,oJAOaqE,EAAc,WACvB,OAAOsH,YAAI,aAGFpL,EAAgB,SAACb,GAC1B,OAAOqM,YAAK,WAAY,CAAErM,UAGjBY,EAAgB,SAACoN,EAAanO,GACvC,OAAO0M,YAAM,YAAD,OAAayB,GAAOnO,IAGvBQ,EAAgB,SAAC2N,GAC1B,OAAOvB,YAAQ,YAAD,OAAauB,M,iCCpB/B,4BAEeC,gBAAcC,IAAMC,cAAc,OAAQ,CACvDrG,EAAG,oNACD,gB,iCCJJ,4BAEemG,gBAAcC,IAAMC,cAAc,OAAQ,CACvDrG,EAAG,sNACD,kB,iCCJJ,sLA4BasG,EAAgB,WACzB,OAAOnC,YAAI,cAWFlF,EAAuB,SAACsH,GACjC,OAAOpC,YAAI,qBAAD,OAAsBoC,KAGvBC,EAAiB,SAACzO,GAC3B,OAAOwM,YAAK,YAAaxM,IAGhB0O,EAAiB,SAACjO,EAAYT,GACvC,OAAO0M,YAAM,aAAD,OAAcjM,GAAMT,IAGvB2O,EAAiB,SAAClO,GAC3B,OAAOmM,YAAQ,aAAD,OAAcnM","file":"static/js/28.af29c13b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nimport TextField from \"../../app/TextField\";\r\nimport Button from \"../../app/Button\";\r\nimport Dialog from \"../../app/Dialog\";\r\nimport { createProject, deleteProject, updateProject } from \"../../api/project\";\r\n\r\nexport const ProjectModal = ({ open, onClose, data, onDone }: { open: boolean; onClose: () => void; data?: any; onDone: () => void }) => {\r\n    const [name, setName] = useState(data?.name);\r\n\r\n    useEffect(() => {\r\n        setName(data?.name);\r\n    }, [data]);\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            if (data) {\r\n                await deleteProject(data.id);\r\n                onDone();\r\n                onClose();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e: any) => {\r\n        e.preventDefault();\r\n        try {\r\n            if (data) {\r\n                await updateProject(data.id, { name });\r\n                onDone();\r\n                onClose();\r\n            } else {\r\n                await createProject(name);\r\n                onDone();\r\n                onClose();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"xs\" fullWidth title={data ? \"Edit project\" : \"Add new project\"}>\r\n            <form onSubmit={handleSubmit}>\r\n                <Box m={1} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" >\r\n                    <TextField label=\"name\" style={{flex:1,width:\"100%\",marginBottom:\"13px\"}} fullWidth value={name} onChange={(e) => setName(e.target.value)} />\r\n                    <Box style={{width:\"100%\",display:\"flex\"}}>\r\n                        {data && (\r\n                            <Button style={{ marginLeft: \"40%\",marginRight:\"30px\" }} onClick={handleDelete} kind=\"delete\">\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                        <Button kind=\"add\" type=\"submit\" style={{flexGrow:1,marginRight:\"3px\"}}>\r\n                            save\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </form>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Dialog from \"../../app/Dialog\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport CheckBox from \"@material-ui/core/Checkbox\";\r\n\r\nimport TextField from \"../../app/TextField\";\r\nimport { FieldSelect } from \"../../app/Inputs\";\r\n\r\nimport { getCustomers } from \"../../api/customer\";\r\nimport { getContacts } from \"../../api/contact\";\r\nimport { getProjects } from \"../../api/project\";\r\nimport { getAllEmployees } from \"../../api/employee\";\r\nimport { getQuotes } from \"../../api/quote\";\r\nimport { IActivity } from \"../../api/activity\";\r\nimport { fetcher } from \"../../api\";\r\n\r\nconst schema = Yup.object().shape({\r\n    name: Yup.string().required(),\r\n});\r\nexport default function ActivityModal({\r\n    open,\r\n    onClose,\r\n    activity,\r\n}: {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    activity: IActivity;\r\n}) {\r\n    const handleSubmit = async (data: IActivity, { setSubmitting }: { setSubmitting: any }) => {\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} title=\"Activity overview\">\r\n            <Box p={2}>\r\n                <Formik initialValues={activity} validationSchema={schema} onSubmit={handleSubmit}>\r\n                    {({ values, errors, touched, handleChange, handleBlur }) => (\r\n                        <Form>\r\n                            <Box display=\"grid\" gridTemplateColumns=\"auto auto auto\" gridColumnGap={10} gridRowGap={5}>\r\n                                <TextField\r\n                                    error={Boolean(errors.name && touched.name)}\r\n                                    name=\"name\"\r\n                                    label=\"name\"\r\n                                    value={values.name}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <TextField\r\n                                    name=\"subject\"\r\n                                    label=\"subject\"\r\n                                    value={values.subject}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <TextField\r\n                                    name=\"location\"\r\n                                    label=\"location\"\r\n                                    value={values.location}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <TextField\r\n                                    name=\"notes\"\r\n                                    label=\"notes\"\r\n                                    value={values.notes}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <TextField\r\n                                    type=\"date\"\r\n                                    name=\"startTime\"\r\n                                    label=\"Start time\"\r\n                                    value={values.startTime}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <TextField\r\n                                    type=\"date\"\r\n                                    name=\"endTime\"\r\n                                    label=\"End time\"\r\n                                    value={values.endTime}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <FieldSelect\r\n                                    request={getCustomers}\r\n                                    itemTitleField=\"name\"\r\n                                    itemValueField=\"id\"\r\n                                    label=\"Client\"\r\n                                    name=\"ClientId\"\r\n                                    value={values.ClientId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n\r\n                                <FieldSelect\r\n                                    label=\"Contact\"\r\n                                    name=\"ContactId\"\r\n                                    request={getContacts}\r\n                                    itemTitleField=\"lastName\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.ContactId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                                <FieldSelect\r\n                                    label=\"ActivityPriorityId\"\r\n                                    name=\"ActivityPriorityId\"\r\n                                    request={() => fetcher(\"/activitypriority\")}\r\n                                    itemTitleField=\"name\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.ActivityPriorityId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                                <FieldSelect\r\n                                    label=\"Project\"\r\n                                    name=\"ProjectId\"\r\n                                    request={getProjects}\r\n                                    itemTitleField=\"name\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.ProjectId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                                <FieldSelect\r\n                                    label=\"Employee\"\r\n                                    name=\"EmployeeId\"\r\n                                    request={getAllEmployees}\r\n                                    itemTitleField=\"username\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.EmployeeId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                                <FieldSelect\r\n                                    label=\"Quote\"\r\n                                    name=\"QuoteId\"\r\n                                    request={getQuotes}\r\n                                    itemTitleField=\"number\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.QuoteId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                                <FieldSelect\r\n                                    label=\"ActivityCategoryId\"\r\n                                    name=\"ActivityCategoryId\"\r\n                                    request={() => fetcher(\"/activitycategory\")}\r\n                                    itemTitleField=\"name\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.ActivityCategoryId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                                <FieldSelect\r\n                                    label=\"ActivityStatusId\"\r\n                                    name=\"ActivityStatusId\"\r\n                                    request={() => fetcher(\"/activitystatus\")}\r\n                                    itemTitleField=\"name\"\r\n                                    itemValueField=\"id\"\r\n                                    value={values.ActivityStatusId}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    style={{ width: \"100%\" }}\r\n                                />\r\n                            </Box>\r\n                            <Box mt={1} display=\"grid\" gridTemplateColumns=\"auto auto auto\" gridColumnGap={10}>\r\n                                <FormControlLabel\r\n                                    name=\"allDayActivity\"\r\n                                    control={<CheckBox />}\r\n                                    label=\"All dat activity\"\r\n                                    checked={values.allDayActivity}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <FormControlLabel\r\n                                    name=\"notifyOnDay\"\r\n                                    control={<CheckBox />}\r\n                                    label=\"Notify on day\"\r\n                                    checked={values.notifyOnDay}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <FormControlLabel\r\n                                    name=\"recurring\"\r\n                                    control={<CheckBox />}\r\n                                    label=\"Recurring\"\r\n                                    checked={values.recurring}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <FormControlLabel\r\n                                    name=\"notifyNow\"\r\n                                    control={<CheckBox />}\r\n                                    label=\"Notify now\"\r\n                                    checked={values.notifyNow}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <FormControlLabel\r\n                                    name=\"doNotShowOnCalendar\"\r\n                                    control={<CheckBox />}\r\n                                    label=\"Do not show on calendar\"\r\n                                    checked={values.doNotShowOnCalendar}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                            </Box>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Container, Box, Button } from \"@material-ui/core\";\r\nimport { GridColDef } from \"@material-ui/data-grid\";\r\n\r\nimport { MyTabs, MyTab } from \"../app/Tabs\";\r\nimport BaseDataGrid from \"../app/BaseDataGrid\";\r\nimport { ProjectModal } from \"../features/Modals/ProjectModals\";\r\nimport ActivityModal from \"../features/Activity/ActivityModal\";\r\n\r\nimport { getProjectActivities, IActivity } from \"../api/activity\";\r\nimport { getProjects } from \"../api/project\";\r\n\r\nexport default function Project() {\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [pData, setPData] = useState<any>();\r\n    const [projects, setProjects] = useState([]);\r\n    const [activities, setActivities] = useState([]);\r\n    const [selectedActivity, setSelectedActivity] = useState<IActivity>();\r\n\r\n    const [projectModal, setProjectModal] = useState(false);\r\n    const [activityModal, setActivityModal] = useState(false);\r\n\r\n    const refreshProjects = useCallback(async () => {\r\n        try {\r\n            const resp = await getProjects();\r\n            setProjects(resp);\r\n            setPData(null);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }, [setProjects, setPData]);\r\n\r\n    const refreshActivities = useCallback(async () => {\r\n        try {\r\n            if (pData) {\r\n                const resp = await getProjectActivities(pData.id);\r\n                setActivities(resp);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }, [pData, setActivities]);\r\n\r\n    useEffect(() => {\r\n        refreshProjects();\r\n    }, [refreshProjects]);\r\n\r\n    useEffect(() => {\r\n        if (activeTab === 1) {\r\n            refreshActivities();\r\n        }\r\n    }, [activeTab, refreshActivities]);\r\n\r\n    const activityCols: GridColDef[] = [\r\n        { field: \"name\" },\r\n        { field: \"subject\" },\r\n        { field: \"location\" },\r\n        { field: \"startTime\", width: 180 },\r\n        { field: \"endTime\", width: 180 },\r\n        { field: \"ActivityPriority\", valueGetter: (data) => data.row.ActivityPriority?.name, width: 180 },\r\n        { field: \"ActivityStatus\", valueGetter: (data) => data.row.ActivityStatus?.name, width: 180 },\r\n        { field: \"notes\" },\r\n    ];\r\n\r\n    const cols: GridColDef[] = [{ field: \"name\" }];\r\n\r\n    return (\r\n        <>\r\n            <ProjectModal\r\n                open={projectModal}\r\n                onClose={() => setProjectModal(false)}\r\n                onDone={refreshProjects}\r\n                data={pData}\r\n            />\r\n            {selectedActivity && (\r\n                <ActivityModal\r\n                    open={activityModal}\r\n                    onClose={() => setActivityModal(false)}\r\n                    activity={selectedActivity}\r\n                />\r\n            )}\r\n\r\n            <Box my={2} display=\"flex\" alignItems=\"center\">\r\n                <Button\r\n                    onClick={() => {\r\n                        setProjectModal(true);\r\n                        setPData(undefined);\r\n                    }}\r\n                >\r\n                    Add new Project\r\n                </Button>\r\n                <Button onClick={() => setProjectModal(true)} disabled={!pData}>\r\n                    Edit project\r\n                </Button>\r\n                <div style={{ flexGrow: 1 }} />\r\n                <MyTabs value={activeTab} onChange={(e, nv) => setActiveTab(nv)}>\r\n                    <MyTab label=\"Overview\" />\r\n                    <MyTab label=\"Details\" />\r\n                </MyTabs>\r\n            </Box>\r\n            <Box>\r\n                {activeTab === 0 && (\r\n                    <BaseDataGrid\r\n                        cols={cols}\r\n                        onRowSelected={(data) => {\r\n                            setPData(data);\r\n                            setActiveTab(1);\r\n                        }}\r\n                        rows={projects}\r\n                    />\r\n                )}\r\n                {activeTab === 1 && (\r\n                    <Box>\r\n                        <h4>Activities</h4>\r\n                        <BaseDataGrid\r\n                            cols={activityCols}\r\n                            rows={activities}\r\n                            onRowSelected={(d) => {\r\n                                setSelectedActivity(d);\r\n                                setActivityModal(true);\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button, ButtonProps, makeStyles } from \"@material-ui/core\";\r\nimport { AddRounded, EditRounded, DeleteRounded } from \"@material-ui/icons\";\r\n\r\nimport { Gradients } from \"../theme\";\r\n\r\ninterface IButton extends ButtonProps {\r\n    kind?: \"add\" | \"edit\" | \"delete\";\r\n}\r\nexport default function MyButton({ kind, ...props }: IButton) {\r\n    const useStyles = makeStyles({\r\n        btnStyle: {\r\n            background: kind ? (kind === \"add\" ? Gradients.success : kind === \"edit\" ? Gradients.warning : Gradients.error) : \"default\",\r\n        },\r\n    });\r\n    let icons = {\r\n        add: <AddRounded />,\r\n        edit: <EditRounded />,\r\n        delete: <DeleteRounded />,\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.btnStyle}\r\n            startIcon={kind ? icons[kind] : props.startIcon}\r\n            variant={kind ? \"contained\" : props.variant}\r\n            color={kind ? \"primary\" : props.color}\r\n            {...props}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { DataGrid, GridToolbar } from \"@material-ui/data-grid\";\r\n\r\nexport const useDataGridStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#f9f9f9\",\r\n        border: \"none\",\r\n\r\n        \"& .MuiDataGrid-columnsContainer\": {\r\n            backgroundColor: \"#202731\",\r\n            color: \"#fff\",\r\n            // borderRadius: \" 10px 10px 0 0\",\r\n        },\r\n        \"& .MuiDataGrid-iconSeparator\": {\r\n            display: \"none\",\r\n            width: 0,\r\n            height: 0,\r\n            opacity: 0,\r\n        },\r\n        \"& .Mui-selected\": {\r\n            boxShadow: \" rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n            backgroundColor: \"#fff !important\",\r\n        },\r\n        \"& .MuiDataGrid-sortIcon\": {\r\n            fill: \"white\",\r\n        },\r\n    },\r\n});\r\n\r\ninterface IBaseDataGrid {\r\n    onRowSelected?: (row: any) => void;\r\n    rows: any[];\r\n    cols: any[];\r\n    height?: number;\r\n    loading?: boolean;\r\n}\r\n\r\nexport default function BaseDataGrid({ onRowSelected, rows, cols, height }: IBaseDataGrid) {\r\n    const classes = useDataGridStyles();\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                flexGrow: 1,\r\n                height: height || 450,\r\n            }}\r\n        >\r\n            <DataGrid\r\n                density=\"compact\"\r\n                components={{ Toolbar: GridToolbar }}\r\n                className={classes.root}\r\n                onRowSelected={(r) => {\r\n                    onRowSelected && onRowSelected(r.data);\r\n                }}\r\n                columns={cols}\r\n                rows={rows}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ScrollDataGrid = ({ onRowSelected, rows, cols, height }: IBaseDataGrid) => {\r\n    const classes = useDataGridStyles();\r\n\r\n    return (\r\n        // <div\r\n        //     style={{\r\n        //         height: height || 450,\r\n        //     }}\r\n        // >\r\n        <DataGrid\r\n            density=\"compact\"\r\n            components={{ Toolbar: GridToolbar }}\r\n            className={classes.root}\r\n            onRowSelected={(r) => {\r\n                onRowSelected && onRowSelected(r.data);\r\n            }}\r\n            columns={cols}\r\n            rows={rows}\r\n        />\r\n        // </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, TextField, StandardTextFieldProps } from \"@material-ui/core\";\r\n// import { BootstrapInput } from \"../TextField\";\r\n\r\n// import styles from \"./inputs.module.css\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { CSSProperties } from \"@material-ui/styles\";\r\n\r\ninterface IMFS {\r\n    request: () => Promise<any>;\r\n    limit?: number;\r\n    label?: string;\r\n    getOptionLabel: (option: any) => string;\r\n    getOptionValue: (option: any) => string;\r\n    onChange?: (e: React.ChangeEvent<{}>, newValue: any) => void;\r\n    onBlur?: React.FocusEventHandler<HTMLDivElement>;\r\n    error?: boolean;\r\n    placeholder?: string;\r\n    style?: CSSProperties;\r\n    value?: any;\r\n}\r\nexport const MaterialFieldSelect = ({\r\n    request,\r\n    limit,\r\n    getOptionLabel,\r\n    getOptionValue,\r\n    onChange,\r\n    value,\r\n    ...props\r\n}: IMFS) => {\r\n    const [options, setOptions] = useState([]);\r\n    const [findValue, setFindValue] = useState<any>();\r\n\r\n    useEffect(() => {\r\n        const t = options.find((o) => getOptionValue(o) === value);\r\n        setFindValue(t);\r\n    }, [value, options, getOptionValue]);\r\n\r\n    useEffect(() => {\r\n        request()\r\n            .then((data) => {\r\n                if (limit && limit > 0) {\r\n                    setOptions(data.slice(0, limit));\r\n                } else {\r\n                    setOptions(data);\r\n                }\r\n            })\r\n            .catch((e) => console.log(e));\r\n    }, [limit, request]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            style={props.style as any}\r\n            getOptionLabel={getOptionLabel}\r\n            options={options}\r\n            onChange={onChange}\r\n            onBlur={props.onBlur}\r\n            value={findValue}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label={props?.label}\r\n                    error={props.error}\r\n                    placeholder={props.placeholder}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\ninterface IOS extends StandardTextFieldProps {\r\n    items: any[];\r\n    itemValueField: string;\r\n    itemTitleField: string;\r\n    keyField?: string;\r\n    inputStyle?: any;\r\n}\r\nexport const ObjectSelect = ({ inputStyle, items, itemTitleField, itemValueField, keyField, ...props }: IOS) => {\r\n    return (\r\n        <TextField {...props} variant=\"outlined\" size=\"small\" select>\r\n            <MenuItem value={undefined}>None</MenuItem>\r\n            {items &&\r\n                items.length >= 0 &&\r\n                items.map((item: any, i) => (\r\n                    <MenuItem key={keyField ? item[keyField] : i} value={item[itemValueField]}>\r\n                        {item[itemTitleField]}\r\n                    </MenuItem>\r\n                ))}\r\n        </TextField>\r\n    );\r\n};\r\n\r\ninterface IFieldSelect extends StandardTextFieldProps {\r\n    request: () => Promise<any>;\r\n    getOptionList?: (data: any) => any;\r\n    itemValueField: string;\r\n    itemTitleField: string;\r\n    limit?: number;\r\n    keyField?: string;\r\n}\r\nexport const FieldSelect = ({\r\n    keyField,\r\n    request,\r\n    itemValueField,\r\n    itemTitleField,\r\n    limit,\r\n    getOptionList,\r\n    ...props\r\n}: IFieldSelect) => {\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        request()\r\n            .then((data) => {\r\n                if (limit && limit > 0) {\r\n                    let options = getOptionList ? getOptionList(data) : data.slice(0, limit);\r\n                    setItems(options);\r\n                } else {\r\n                    let options = getOptionList ? getOptionList(data) : data;\r\n                    setItems(options);\r\n                }\r\n            })\r\n            .catch((e) => console.log(e));\r\n    }, [getOptionList, limit, request]);\r\n\r\n    return <ObjectSelect {...props} itemTitleField={itemTitleField} itemValueField={itemValueField} items={items} />;\r\n};\r\n\r\ninterface IArraySelect extends StandardTextFieldProps {\r\n    items?: any[];\r\n}\r\nexport const ArraySelect = ({ items, ...props }: IArraySelect) => {\r\n    return (\r\n        <ObjectSelect\r\n            itemTitleField=\"item\"\r\n            itemValueField=\"item\"\r\n            items={items ? items.map((item) => ({ item: item })) : []}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport const BaseSelect = (props: StandardTextFieldProps) => {\r\n    return (\r\n        <TextField {...props} variant=\"outlined\" size=\"small\" select>\r\n            {props.children}\r\n        </TextField>\r\n    );\r\n};\r\n","import { get, post, patch, delete_ } from \".\";\r\n\r\nexport interface IContact {\r\n    id: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    phone: string;\r\n    ext: string;\r\n    email: string;\r\n    title: string;\r\n    department: string;\r\n    active: boolean;\r\n    main: boolean;\r\n    officeHours: string;\r\n}\r\n\r\nexport const getContacts = () => {\r\n    return get(\"/contact\");\r\n};\r\n\r\nexport const getAllModelContact = (model: string, id: string) => {\r\n    return get(`/contact/${model}/${id}`);\r\n};\r\n\r\nexport const createAModelContact = (model: string, id: string, data: IContact) => {\r\n    return post(`/contact/${model}/${id}`, data);\r\n};\r\n\r\nexport const updateAModelContact = (id: string, data: IContact) => {\r\n    return patch(`/contact/${id}`, data);\r\n};\r\n\r\nexport const deleteAModelContact = (id: string) => {\r\n    return delete_(`/contact/${id}`);\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    TabProps,\r\n    withStyles,\r\n    createStyles,\r\n    Theme,\r\n    makeStyles,\r\n    ExtendButtonBase,\r\n    TabTypeMap,\r\n} from \"@material-ui/core\";\r\n\r\n// const useStyles = makeStyles({\r\n//     root: {\r\n//         textTransform: \"none\",\r\n//         minWidth: \"2em\",\r\n//         minHeight: \"45px\",\r\n//         \"&:hover\": {\r\n//             color: \"#aaa\",\r\n//             opacity: 1,\r\n//         },\r\n//         \"&$selected\": {\r\n//             backgroundColor: \"#1a73e8\",\r\n//             borderRadius: \"0.5em\",\r\n//             color: \"#fff\",\r\n//         },\r\n//         \"&:active\": {\r\n//             borderRadius: \"0.5em\",\r\n//             color: \"#aaa\",\r\n//         },\r\n//         \"&:focus\": {\r\n//             borderRadius: \"0.5em\",\r\n//             color: \"#fff\",\r\n//         },\r\n//     },\r\n// });\r\n\r\nexport const MyTabs = withStyles({\r\n    root: {\r\n        minHeight: \"45px\",\r\n        border: \"1px solid #848484\",\r\n        borderRadius: \"0.5em\",\r\n    },\r\n    indicator: {\r\n        backgroundColor: \"#ccc\",\r\n        height: 0,\r\n    },\r\n})(Tabs);\r\n// ExtendButtonBase<TabTypeMap<{}, \"div\">>\r\n// export const MyTab = (props: any) => {\r\n//     const classes = useStyles();\r\n\r\n//     return <Tab className={classes.root} disableRipple {...props} />;\r\n// };\r\n\r\nexport const MyTab = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            textTransform: \"none\",\r\n            minWidth: \"2em\",\r\n            minHeight: \"45px\",\r\n            \"&:hover\": {\r\n                color: \"#aaa\",\r\n                opacity: 1,\r\n            },\r\n            \"&$selected\": {\r\n                backgroundColor: \"#1a73e8\",\r\n                borderRadius: \"0.5em\",\r\n                color: \"#fff\",\r\n            },\r\n            \"&:active\": {\r\n                borderRadius: \"0.5em\",\r\n                color: \"#aaa\",\r\n            },\r\n            \"&:focus\": {\r\n                borderRadius: \"0.5em\",\r\n                color: \"#fff\",\r\n            },\r\n        },\r\n        selected: {},\r\n    })\r\n)((props: any) => <Tab disableRipple {...props} />);\r\n","import { get, post, delete_, patch } from \".\";\r\n\r\nexport interface ICustomer {\r\n    id: string;\r\n    approved: boolean;\r\n    name: string;\r\n    address: string;\r\n    state: string;\r\n    city: string;\r\n    zipcode: string;\r\n    phone: string;\r\n    email: string;\r\n    productLine: string;\r\n    supportStaff: string;\r\n    refferedBy: string;\r\n    linkedId: string;\r\n    facebook: string;\r\n    instagram: string;\r\n    website: string;\r\n    size: string;\r\n    fax: string;\r\n    parent: string;\r\n    status: string;\r\n    regularCommissionPercentage: number;\r\n    overageCommissionPercentage: number;\r\n    CustomerTypeId: string;\r\n}\r\n\r\nexport const getCustomers = () => {\r\n    return get(\"/customer\");\r\n};\r\n\r\nexport const addCustomer = (customer: ICustomer) => {\r\n    return post(\"/customer\", customer);\r\n};\r\n\r\nexport const deleteCustomer = (id: string) => {\r\n    return delete_(`/customer/${id}`);\r\n};\r\n\r\nexport const editCustomer = (id: string, data: ICustomer) => {\r\n    return patch(`/customer/${id}`, data);\r\n};\r\n","import { get, patch, post, delete_ } from \".\";\r\n\r\nimport { ICustomer } from \"./customer\";\r\nimport { IEmployee } from \"./employee\";\r\n\r\nimport { ILineItem } from \"./lineItem\";\r\nimport { ILineService } from \"./lineService\";\r\n\r\nexport interface IQuote {\r\n    id: string;\r\n    number: string;\r\n    relatedNumber: string;\r\n    SOId: string;\r\n    entryDate: number;\r\n    expireDate: number;\r\n    ProjectId: any;\r\n    location: string;\r\n    leadTime: string;\r\n    note: string;\r\n    status: string;\r\n    repOrAgency: ICustomer;\r\n    requesterName: string;\r\n    requesterMail: string;\r\n    requesterPhone: string;\r\n    client: ICustomer;\r\n    unitPricingLevel: string;\r\n    estimatedShipDate: number;\r\n    TicketId: number;\r\n    QuoteRequestId?: any;\r\n    freightTerms: string;\r\n    paymentTerms: string;\r\n    depositRequired: boolean;\r\n    deposit: number;\r\n    depositAmount: number;\r\n    commissionRate: string;\r\n    regularCommission: number;\r\n    overageCommission: number;\r\n    salesperson: IEmployee;\r\n\r\n    EmployeeId: IEmployee;\r\n    createdAt: number;\r\n    updatedAt: number;\r\n    totalAmount: number;\r\n    lineItemRecords: ILineItem[];\r\n    lineServiceRecords: ILineService[];\r\n    __v: number;\r\n}\r\n\r\nexport interface IQuoteComplete extends IQuote {\r\n    lines: ILineItem[];\r\n    lineServices: ILineService[];\r\n}\r\n\r\nexport const createQuoteLineService = (quoteId: string, data: ILineService) => {\r\n    return post(`/quote/${quoteId}/lineservice`, data);\r\n};\r\n\r\nexport const editQuoteLineService = (id: string, data: ILineService) => {\r\n    return patch(`/lineservice/${id}`, data);\r\n};\r\n\r\nexport const deleteQuoteLineService = (id: string) => {\r\n    return delete_(`/lineservice/${id}`);\r\n};\r\n\r\nexport const getQuoteLineServices = (quoteId: string) => {\r\n    return get(`/lineservice`, { params: { quoteId } });\r\n};\r\n\r\nexport const createLineItem = (qId: string, data: ILineItem) => {\r\n    return post(`/quote/${qId}/lineitem`, data);\r\n};\r\n\r\nexport const editLineItem = (id: string, data: ILineItem) => {\r\n    return patch(`/lineitem/${id}`, data);\r\n};\r\n\r\nexport const deleteLineItem = (id: string) => {\r\n    return delete_(`/lineitem/${id}`);\r\n};\r\n\r\nexport const getLineItems = (quoteId: string) => {\r\n    return get(`/lineitem`, { params: { QuoteId: quoteId } });\r\n};\r\n\r\nexport const getQuotes = () => {\r\n    return get(\"/quote\");\r\n};\r\n\r\nexport const getQuoteById = (id: string) => {\r\n    return get(`/quote/${id}`);\r\n};\r\n\r\nexport const createQuote = (data: IQuote) => {\r\n    return post(\"/quote\", data);\r\n};\r\nexport const createQuoteComplete = (data: any) => {\r\n    return post(\"/quote\", data);\r\n};\r\n\r\nexport const updateQuote = (id: string, data: IQuote) => {\r\n    return patch(`/quote/${id}`, data);\r\n};\r\n\r\nexport const deleteQuote = (id: string) => {\r\n    return delete_(`/quote/${id}`);\r\n};\r\n","import {get, post, patch, delete_ } from \".\";\r\n\r\nexport interface IProject {\r\n    id?: string;\r\n    name: string;\r\n}\r\n\r\nexport const getProjects = () => {\r\n    return get(\"/project\");\r\n};\r\n\r\nexport const createProject = (name: string) => {\r\n    return post(\"/project\", { name });\r\n};\r\n\r\nexport const updateProject = (pId: string, data: any) => {\r\n    return patch(`/project/${pId}`, data);\r\n};\r\n\r\nexport const deleteProject = (pId: string) => {\r\n    return delete_(`/project/${pId}`);\r\n};\r\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M3 17.46v3.04c0 .28.22.5.5.5h3.04c.13 0 .26-.05.35-.15L17.81 9.94l-3.75-3.75L3.15 17.1c-.1.1-.15.22-.15.36zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'EditRounded');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z\"\n}), 'DeleteRounded');","import { delete_, get, patch, post } from \".\";\r\n\r\nexport interface IActivity {\r\n    id?: string;\r\n    name: string;\r\n    subject: string;\r\n    location: string;\r\n    notes: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    allDayActivity: boolean;\r\n    doNotShowOnCalendar: boolean;\r\n    recurring: boolean;\r\n    notifyNow: boolean;\r\n    notifyOnDay: boolean;\r\n\r\n    OpportunityId?: number | null;\r\n\r\n    ClientId: number | null;\r\n    ContactId: number | null;\r\n    ProjectId: number | null;\r\n    EmployeeId: number | null;\r\n    QuoteId: number | null;\r\n    ActivityCategoryId: number | null;\r\n    ActivityStatusId: number | null;\r\n    ActivityPriorityId: number | null;\r\n}\r\n\r\nexport const getActivities = () => {\r\n    return get(\"/activity\");\r\n};\r\n\r\nexport const getClientActivities = (clientId: string) => {\r\n    return get(`/activity/client/${clientId}`);\r\n};\r\n\r\nexport const getQuoteActivities = (quoteId: string) => {\r\n    return get(`/activity/quote/${quoteId}`);\r\n};\r\n\r\nexport const getProjectActivities = (projectId: string) => {\r\n    return get(`/activity/project/${projectId}`);\r\n};\r\n\r\nexport const createActivity = (data: IActivity) => {\r\n    return post(\"/activity\", data);\r\n};\r\n\r\nexport const updateActivity = (id: string, data: IActivity) => {\r\n    return patch(`/activity/${id}`, data);\r\n};\r\n\r\nexport const deleteActivity = (id: string) => {\r\n    return delete_(`/activity/${id}`);\r\n};\r\n"],"sourceRoot":""}