{"version":3,"sources":["pages/JobParts.tsx","app/BaseDataGrid.tsx","../node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowLeft.js","../node_modules/@material-ui/core/esm/internal/svg-icons/KeyboardArrowRight.js","../node_modules/@material-ui/core/esm/Container/Container.js"],"names":["Parts","bomId","useParams","bomRecords","useSWR","data","history","useHistory","bomRecordCols","useMemo","field","headerName","valueFormatter","params","row","ItemId","no","width","name","flex","type","cols","rows","onRowSelected","d","push","id","useDataGridStyles","makeStyles","root","backgroundColor","border","color","display","height","opacity","boxShadow","fill","BaseDataGrid","classes","style","flexGrow","density","components","Toolbar","GridToolbar","className","r","columns","ScrollDataGrid","createSvgIcon","React","Container","props","ref","_props$component","component","Component","_props$disableGutters","disableGutters","_props$fixed","fixed","_props$maxWidth","maxWidth","other","_objectWithoutProperties","_extends","clsx","concat","capitalize","String","withStyles","theme","_defineProperty","marginLeft","boxSizing","marginRight","paddingLeft","spacing","paddingRight","breakpoints","up","Object","keys","values","reduce","acc","breakpoint","value","maxWidthXs","Math","max","xs","maxWidthSm","sm","maxWidthMd","md","maxWidthLg","lg","maxWidthXl","xl"],"mappings":"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","file":"static/js/33.9f1e40a4.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Container, Typography } from \"@material-ui/core\";\r\nimport { GridColumns } from \"@material-ui/data-grid\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useSWR from \"swr\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport BaseDataGrid from \"../app/BaseDataGrid\";\r\n\r\nfunction Parts() {\r\n    const { bomId } = useParams<{ bomId: string }>();\r\n    const { data: bomRecords } = useSWR(bomId ? `/bomrecord?UBOMId=${bomId}` : null);\r\n    let history = useHistory();\r\n\r\n    const bomRecordCols = useMemo<GridColumns>(\r\n        () => [\r\n            { field: \"no\", headerName: \"No.\", valueFormatter: (params) => params.row?.ItemId?.no, width: 120 },\r\n            { field: \"name\", headerName: \"Name\", valueFormatter: (params) => params.row?.ItemId?.name, flex: 1 },\r\n            { field: \"revision\", headerName: \"Revision\", width: 120 },\r\n            { field: \"usage\", headerName: \"Usage\", width: 80 },\r\n            { field: \"fixedQty\", headerName: \"Fixed QTY\", type: \"boolean\", width: 120 },\r\n        ],\r\n        []\r\n    );\r\n\r\n    if (!bomId) {\r\n        <Container>\r\n            <Typography>Sorry, Can't find Parts for this bom</Typography>\r\n        </Container>;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <BaseDataGrid\r\n                cols={bomRecordCols}\r\n                rows={bomRecords || []}\r\n                onRowSelected={(d) => {\r\n                    history.push(`/panel/inventory/${d.ItemId.id}`);\r\n                }}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Parts;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { DataGrid, GridToolbar } from \"@material-ui/data-grid\";\r\n\r\nexport const useDataGridStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#f9f9f9\",\r\n        border: \"none\",\r\n\r\n        \"& .MuiDataGrid-columnsContainer\": {\r\n            backgroundColor: \"#202731\",\r\n            color: \"#fff\",\r\n            // borderRadius: \" 10px 10px 0 0\",\r\n        },\r\n        \"& .MuiDataGrid-iconSeparator\": {\r\n            display: \"none\",\r\n            width: 0,\r\n            height: 0,\r\n            opacity: 0,\r\n        },\r\n        \"& .Mui-selected\": {\r\n            boxShadow: \" rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n            backgroundColor: \"#fff !important\",\r\n        },\r\n        \"& .MuiDataGrid-sortIcon\": {\r\n            fill: \"white\",\r\n        },\r\n    },\r\n});\r\n\r\ninterface IBaseDataGrid {\r\n    onRowSelected?: (row: any) => void;\r\n    rows: any[];\r\n    cols: any[];\r\n    height?: number | string;\r\n    loading?: boolean;\r\n}\r\n\r\nexport default function BaseDataGrid({ onRowSelected, rows, cols, height }: IBaseDataGrid) {\r\n    const classes = useDataGridStyles();\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                flexGrow: 1,\r\n                height: height || 450,\r\n            }}\r\n        >\r\n            <DataGrid\r\n                density=\"compact\"\r\n                components={{ Toolbar: GridToolbar }}\r\n                className={classes.root}\r\n                onRowSelected={(r) => {\r\n                    onRowSelected && onRowSelected(r.data);\r\n                }}\r\n                columns={cols}\r\n                rows={rows}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ScrollDataGrid = ({ onRowSelected, rows, cols, height }: IBaseDataGrid) => {\r\n    const classes = useDataGridStyles();\r\n\r\n    return (\r\n        // <div\r\n        //     style={{\r\n        //         height: height || 450,\r\n        //     }}\r\n        // >\r\n        <DataGrid\r\n            density=\"compact\"\r\n            components={{ Toolbar: GridToolbar }}\r\n            className={classes.root}\r\n            onRowSelected={(r) => {\r\n                onRowSelected && onRowSelected(r.data);\r\n            }}\r\n            columns={cols}\r\n            rows={rows}\r\n        />\r\n        // </div>\r\n    );\r\n};\r\n","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\"\n}), 'KeyboardArrowLeft');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"\n}), 'KeyboardArrowRight');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _defineProperty({\n      width: '100%',\n      marginLeft: 'auto',\n      boxSizing: 'border-box',\n      marginRight: 'auto',\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      display: 'block'\n    }, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }),\n\n    /* Styles applied to the root element if `disableGutters={true}`. */\n    disableGutters: {\n      paddingLeft: 0,\n      paddingRight: 0\n    },\n\n    /* Styles applied to the root element if `fixed={true}`. */\n    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {\n      var value = theme.breakpoints.values[breakpoint];\n\n      if (value !== 0) {\n        acc[theme.breakpoints.up(breakpoint)] = {\n          maxWidth: value\n        };\n      }\n\n      return acc;\n    }, {}),\n\n    /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {\n      maxWidth: theme.breakpoints.values.sm\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {\n      maxWidth: theme.breakpoints.values.md\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {\n      maxWidth: theme.breakpoints.values.lg\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {\n      maxWidth: theme.breakpoints.values.xl\n    })\n  };\n};\nvar Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? false : _props$fixed,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[\"maxWidth\".concat(capitalize(String(maxWidth)))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);"],"sourceRoot":""}